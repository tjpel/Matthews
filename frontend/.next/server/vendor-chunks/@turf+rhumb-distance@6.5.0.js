"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+rhumb-distance@6.5.0";
exports.ids = ["vendor-chunks/@turf+rhumb-distance@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+rhumb-distance@6.5.0/node_modules/@turf/rhumb-distance/dist/es/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+rhumb-distance@6.5.0/node_modules/@turf/rhumb-distance/dist/es/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/.pnpm/@turf+invariant@6.5.0/node_modules/@turf/invariant/dist/es/index.js\");\n// https://en.wikipedia.org/wiki/Rhumb_line\n\n\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction rhumbDistance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var origin = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getCoord)(from);\n    var destination = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getCoord)(to);\n    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n    destination[0] +=\n        destination[0] - origin[0] > 180\n            ? -360\n            : origin[0] - destination[0] > 180\n                ? 360\n                : 0;\n    var distanceInMeters = calculateRhumbDistance(origin, destination);\n    var distance = (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.convertLength)(distanceInMeters, \"meters\", options.units);\n    return distance;\n}\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\nfunction calculateRhumbDistance(origin, destination, radius) {\n    // φ => phi\n    // λ => lambda\n    // ψ => psi\n    // Δ => Delta\n    // δ => delta\n    // θ => theta\n    radius = radius === undefined ? _turf_helpers__WEBPACK_IMPORTED_MODULE_0__.earthRadius : Number(radius);\n    // see www.edwilliams.org/avform.htm#Rhumb\n    var R = radius;\n    var phi1 = (origin[1] * Math.PI) / 180;\n    var phi2 = (destination[1] * Math.PI) / 180;\n    var DeltaPhi = phi2 - phi1;\n    var DeltaLambda = (Math.abs(destination[0] - origin[0]) * Math.PI) / 180;\n    // if dLon over 180° take shorter rhumb line across the anti-meridian:\n    if (DeltaLambda > Math.PI) {\n        DeltaLambda -= 2 * Math.PI;\n    }\n    // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n    // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n    // distance is pythagoras on 'stretched' Mercator projection\n    var delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda); // angular distance in radians\n    var dist = delta * R;\n    return dist;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rhumbDistance);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrcmh1bWItZGlzdGFuY2VANi41LjAvbm9kZV9tb2R1bGVzL0B0dXJmL3JodW1iLWRpc3RhbmNlL2Rpc3QvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDMkQ7QUFDaEI7QUFDM0M7QUFDQSwyREFBMkQsb0JBQW9CO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixpQkFBaUIseURBQVE7QUFDekIsc0JBQXNCLHlEQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0REFBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLGVBQWU7QUFDNUIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNEQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsaUVBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWZ2YWx1ZS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdHVyZityaHVtYi1kaXN0YW5jZUA2LjUuMC9ub2RlX21vZHVsZXMvQHR1cmYvcmh1bWItZGlzdGFuY2UvZGlzdC9lcy9pbmRleC5qcz9iNzUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JodW1iX2xpbmVcbmltcG9ydCB7IGNvbnZlcnRMZW5ndGgsIGVhcnRoUmFkaXVzIH0gZnJvbSBcIkB0dXJmL2hlbHBlcnNcIjtcbmltcG9ydCB7IGdldENvb3JkIH0gZnJvbSBcIkB0dXJmL2ludmFyaWFudFwiO1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBhbG9uZyBhIHJodW1iIGxpbmUgYmV0d2VlbiB0d28ge0BsaW5rIFBvaW50fHBvaW50c30gaW4gZGVncmVlcywgcmFkaWFucyxcbiAqIG1pbGVzLCBvciBraWxvbWV0ZXJzLlxuICpcbiAqIEBuYW1lIHJodW1iRGlzdGFuY2VcbiAqIEBwYXJhbSB7Q29vcmR9IGZyb20gb3JpZ2luIHBvaW50XG4gKiBAcGFyYW0ge0Nvb3JkfSB0byBkZXN0aW5hdGlvbiBwb2ludFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudW5pdHM9XCJraWxvbWV0ZXJzXCJdIGNhbiBiZSBkZWdyZWVzLCByYWRpYW5zLCBtaWxlcywgb3Iga2lsb21ldGVyc1xuICogQHJldHVybnMge251bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHBvaW50c1xuICogQGV4YW1wbGVcbiAqIHZhciBmcm9tID0gdHVyZi5wb2ludChbLTc1LjM0MywgMzkuOTg0XSk7XG4gKiB2YXIgdG8gPSB0dXJmLnBvaW50KFstNzUuNTM0LCAzOS4xMjNdKTtcbiAqIHZhciBvcHRpb25zID0ge3VuaXRzOiAnbWlsZXMnfTtcbiAqXG4gKiB2YXIgZGlzdGFuY2UgPSB0dXJmLnJodW1iRGlzdGFuY2UoZnJvbSwgdG8sIG9wdGlvbnMpO1xuICpcbiAqIC8vYWRkVG9NYXBcbiAqIHZhciBhZGRUb01hcCA9IFtmcm9tLCB0b107XG4gKiBmcm9tLnByb3BlcnRpZXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAqIHRvLnByb3BlcnRpZXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAqL1xuZnVuY3Rpb24gcmh1bWJEaXN0YW5jZShmcm9tLCB0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIG9yaWdpbiA9IGdldENvb3JkKGZyb20pO1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IGdldENvb3JkKHRvKTtcbiAgICAvLyBjb21wZW5zYXRlIHRoZSBjcm9zc2luZyBvZiB0aGUgMTgwdGggbWVyaWRpYW4gKGh0dHBzOi8vbWFjd3JpZ2h0Lm9yZy8yMDE2LzA5LzI2L3RoZS0xODB0aC1tZXJpZGlhbi5odG1sKVxuICAgIC8vIHNvbHV0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzLzMyNTAjaXNzdWVjb21tZW50LTI5NDg4NzY3OFxuICAgIGRlc3RpbmF0aW9uWzBdICs9XG4gICAgICAgIGRlc3RpbmF0aW9uWzBdIC0gb3JpZ2luWzBdID4gMTgwXG4gICAgICAgICAgICA/IC0zNjBcbiAgICAgICAgICAgIDogb3JpZ2luWzBdIC0gZGVzdGluYXRpb25bMF0gPiAxODBcbiAgICAgICAgICAgICAgICA/IDM2MFxuICAgICAgICAgICAgICAgIDogMDtcbiAgICB2YXIgZGlzdGFuY2VJbk1ldGVycyA9IGNhbGN1bGF0ZVJodW1iRGlzdGFuY2Uob3JpZ2luLCBkZXN0aW5hdGlvbik7XG4gICAgdmFyIGRpc3RhbmNlID0gY29udmVydExlbmd0aChkaXN0YW5jZUluTWV0ZXJzLCBcIm1ldGVyc1wiLCBvcHRpb25zLnVuaXRzKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIHRyYXZlbGxpbmcgZnJvbSDigJh0aGlz4oCZIHBvaW50IHRvIGRlc3RpbmF0aW9uIHBvaW50IGFsb25nIGEgcmh1bWIgbGluZS5cbiAqIEFkYXB0ZWQgZnJvbSBHZW9kZXN5OiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXN2ZW5lc3MvZ2VvZGVzeS9ibG9iL21hc3Rlci9sYXRsb24tc3BoZXJpY2FsLmpzXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtBcnJheTxudW1iZXI+fSBvcmlnaW4gcG9pbnQuXG4gKiBAcGFyYW0gICB7QXJyYXk8bnVtYmVyPn0gZGVzdGluYXRpb24gcG9pbnQuXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBbcmFkaXVzPTYzNzFlM10gLSAoTWVhbikgcmFkaXVzIG9mIGVhcnRoIChkZWZhdWx0cyB0byByYWRpdXMgaW4gbWV0cmVzKS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IERpc3RhbmNlIGluIGttIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgZGVzdGluYXRpb24gcG9pbnQgKHNhbWUgdW5pdHMgYXMgcmFkaXVzKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBwMSA9IG5ldyBMYXRMb24oNTEuMTI3LCAxLjMzOCk7XG4gKiAgICAgdmFyIHAyID0gbmV3IExhdExvbig1MC45NjQsIDEuODUzKTtcbiAqICAgICB2YXIgZCA9IHAxLmRpc3RhbmNlVG8ocDIpOyAvLyA0MC4zMSBrbVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVSaHVtYkRpc3RhbmNlKG9yaWdpbiwgZGVzdGluYXRpb24sIHJhZGl1cykge1xuICAgIC8vIM+GID0+IHBoaVxuICAgIC8vIM67ID0+IGxhbWJkYVxuICAgIC8vIM+IID0+IHBzaVxuICAgIC8vIM6UID0+IERlbHRhXG4gICAgLy8gzrQgPT4gZGVsdGFcbiAgICAvLyDOuCA9PiB0aGV0YVxuICAgIHJhZGl1cyA9IHJhZGl1cyA9PT0gdW5kZWZpbmVkID8gZWFydGhSYWRpdXMgOiBOdW1iZXIocmFkaXVzKTtcbiAgICAvLyBzZWUgd3d3LmVkd2lsbGlhbXMub3JnL2F2Zm9ybS5odG0jUmh1bWJcbiAgICB2YXIgUiA9IHJhZGl1cztcbiAgICB2YXIgcGhpMSA9IChvcmlnaW5bMV0gKiBNYXRoLlBJKSAvIDE4MDtcbiAgICB2YXIgcGhpMiA9IChkZXN0aW5hdGlvblsxXSAqIE1hdGguUEkpIC8gMTgwO1xuICAgIHZhciBEZWx0YVBoaSA9IHBoaTIgLSBwaGkxO1xuICAgIHZhciBEZWx0YUxhbWJkYSA9IChNYXRoLmFicyhkZXN0aW5hdGlvblswXSAtIG9yaWdpblswXSkgKiBNYXRoLlBJKSAvIDE4MDtcbiAgICAvLyBpZiBkTG9uIG92ZXIgMTgwwrAgdGFrZSBzaG9ydGVyIHJodW1iIGxpbmUgYWNyb3NzIHRoZSBhbnRpLW1lcmlkaWFuOlxuICAgIGlmIChEZWx0YUxhbWJkYSA+IE1hdGguUEkpIHtcbiAgICAgICAgRGVsdGFMYW1iZGEgLT0gMiAqIE1hdGguUEk7XG4gICAgfVxuICAgIC8vIG9uIE1lcmNhdG9yIHByb2plY3Rpb24sIGxvbmdpdHVkZSBkaXN0YW5jZXMgc2hyaW5rIGJ5IGxhdGl0dWRlOyBxIGlzIHRoZSAnc3RyZXRjaCBmYWN0b3InXG4gICAgLy8gcSBiZWNvbWVzIGlsbC1jb25kaXRpb25lZCBhbG9uZyBFLVcgbGluZSAoMC8wKTsgdXNlIGVtcGlyaWNhbCB0b2xlcmFuY2UgdG8gYXZvaWQgaXRcbiAgICB2YXIgRGVsdGFQc2kgPSBNYXRoLmxvZyhNYXRoLnRhbihwaGkyIC8gMiArIE1hdGguUEkgLyA0KSAvIE1hdGgudGFuKHBoaTEgLyAyICsgTWF0aC5QSSAvIDQpKTtcbiAgICB2YXIgcSA9IE1hdGguYWJzKERlbHRhUHNpKSA+IDEwZS0xMiA/IERlbHRhUGhpIC8gRGVsdGFQc2kgOiBNYXRoLmNvcyhwaGkxKTtcbiAgICAvLyBkaXN0YW5jZSBpcyBweXRoYWdvcmFzIG9uICdzdHJldGNoZWQnIE1lcmNhdG9yIHByb2plY3Rpb25cbiAgICB2YXIgZGVsdGEgPSBNYXRoLnNxcnQoRGVsdGFQaGkgKiBEZWx0YVBoaSArIHEgKiBxICogRGVsdGFMYW1iZGEgKiBEZWx0YUxhbWJkYSk7IC8vIGFuZ3VsYXIgZGlzdGFuY2UgaW4gcmFkaWFuc1xuICAgIHZhciBkaXN0ID0gZGVsdGEgKiBSO1xuICAgIHJldHVybiBkaXN0O1xufVxuZXhwb3J0IGRlZmF1bHQgcmh1bWJEaXN0YW5jZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+rhumb-distance@6.5.0/node_modules/@turf/rhumb-distance/dist/es/index.js\n");

/***/ })

};
;