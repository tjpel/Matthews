"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+line-split@6.5.0";
exports.ids = ["vendor-chunks/@turf+line-split@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+line-split@6.5.0/node_modules/@turf/line-split/dist/es/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+line-split@6.5.0/node_modules/@turf/line-split/dist/es/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var geojson_rbush__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! geojson-rbush */ \"(ssr)/./node_modules/.pnpm/geojson-rbush@3.2.0/node_modules/geojson-rbush/index.js\");\n/* harmony import */ var _turf_square__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/square */ \"(ssr)/./node_modules/.pnpm/@turf+square@6.5.0/node_modules/@turf/square/dist/es/index.js\");\n/* harmony import */ var _turf_bbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/bbox */ \"(ssr)/./node_modules/.pnpm/@turf+bbox@6.5.0/node_modules/@turf/bbox/dist/es/index.js\");\n/* harmony import */ var _turf_truncate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turf/truncate */ \"(ssr)/./node_modules/.pnpm/@turf+truncate@6.5.0/node_modules/@turf/truncate/dist/es/index.js\");\n/* harmony import */ var _turf_line_segment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @turf/line-segment */ \"(ssr)/./node_modules/.pnpm/@turf+line-segment@6.5.0/node_modules/@turf/line-segment/dist/es/index.js\");\n/* harmony import */ var _turf_line_intersect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @turf/line-intersect */ \"(ssr)/./node_modules/.pnpm/@turf+line-intersect@6.5.0/node_modules/@turf/line-intersect/dist/es/index.js\");\n/* harmony import */ var _turf_nearest_point_on_line__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @turf/nearest-point-on-line */ \"(ssr)/./node_modules/.pnpm/@turf+nearest-point-on-line@6.5.0/node_modules/@turf/nearest-point-on-line/dist/es/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/.pnpm/@turf+invariant@6.5.0/node_modules/@turf/invariant/dist/es/index.js\");\n/* harmony import */ var _turf_meta__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @turf/meta */ \"(ssr)/./node_modules/.pnpm/@turf+meta@6.5.0/node_modules/@turf/meta/dist/es/index.js\");\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Split a LineString by another GeoJSON Feature.\n *\n * @name lineSplit\n * @param {Feature<LineString>} line LineString Feature to split\n * @param {Feature<any>} splitter Feature used to split line\n * @returns {FeatureCollection<LineString>} Split LineStrings\n * @example\n * var line = turf.lineString([[120, -25], [145, -25]]);\n * var splitter = turf.lineString([[130, -15], [130, -35]]);\n *\n * var split = turf.lineSplit(line, splitter);\n *\n * //addToMap\n * var addToMap = [line, splitter]\n */\nfunction lineSplit(line, splitter) {\n  if (!line) throw new Error(\"line is required\");\n  if (!splitter) throw new Error(\"splitter is required\");\n\n  var lineType = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getType)(line);\n  var splitterType = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getType)(splitter);\n\n  if (lineType !== \"LineString\") throw new Error(\"line must be LineString\");\n  if (splitterType === \"FeatureCollection\")\n    throw new Error(\"splitter cannot be a FeatureCollection\");\n  if (splitterType === \"GeometryCollection\")\n    throw new Error(\"splitter cannot be a GeometryCollection\");\n\n  // remove excessive decimals from splitter\n  // to avoid possible approximation issues in rbush\n  var truncatedSplitter = (0,_turf_truncate__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(splitter, { precision: 7 });\n\n  switch (splitterType) {\n    case \"Point\":\n      return splitLineWithPoint(line, truncatedSplitter);\n    case \"MultiPoint\":\n      return splitLineWithPoints(line, truncatedSplitter);\n    case \"LineString\":\n    case \"MultiLineString\":\n    case \"Polygon\":\n    case \"MultiPolygon\":\n      return splitLineWithPoints(line, (0,_turf_line_intersect__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(line, truncatedSplitter));\n  }\n}\n\n/**\n * Split LineString with MultiPoint\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {FeatureCollection<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoints(line, splitter) {\n  var results = [];\n  var tree = geojson_rbush__WEBPACK_IMPORTED_MODULE_0__();\n\n  (0,_turf_meta__WEBPACK_IMPORTED_MODULE_8__.flattenEach)(splitter, function (point) {\n    // Add index/id to features (needed for filter)\n    results.forEach(function (feature, index) {\n      feature.id = index;\n    });\n    // First Point - doesn't need to handle any previous line results\n    if (!results.length) {\n      results = splitLineWithPoint(line, point).features;\n\n      // Add Square BBox to each feature for GeoJSON-RBush\n      results.forEach(function (feature) {\n        if (!feature.bbox) feature.bbox = (0,_turf_square__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_turf_bbox__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(feature));\n      });\n      tree.load((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.featureCollection)(results));\n      // Split with remaining points - lines might needed to be split multiple times\n    } else {\n      // Find all lines that are within the splitter's bbox\n      var search = tree.search(point);\n\n      if (search.features.length) {\n        // RBush might return multiple lines - only process the closest line to splitter\n        var closestLine = findClosestFeature(point, search);\n\n        // Remove closest line from results since this will be split into two lines\n        // This removes any duplicates inside the results & index\n        results = results.filter(function (feature) {\n          return feature.id !== closestLine.id;\n        });\n        tree.remove(closestLine);\n\n        // Append the two newly split lines into the results\n        (0,_turf_meta__WEBPACK_IMPORTED_MODULE_8__.featureEach)(splitLineWithPoint(closestLine, point), function (line) {\n          results.push(line);\n          tree.insert(line);\n        });\n      }\n    }\n  });\n  return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.featureCollection)(results);\n}\n\n/**\n * Split LineString with Point\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {Feature<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoint(line, splitter) {\n  var results = [];\n\n  // handle endpoints\n  var startPoint = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoords)(line)[0];\n  var endPoint = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoords)(line)[line.geometry.coordinates.length - 1];\n  if (\n    pointsEquals(startPoint, (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoord)(splitter)) ||\n    pointsEquals(endPoint, (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoord)(splitter))\n  )\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.featureCollection)([line]);\n\n  // Create spatial index\n  var tree = geojson_rbush__WEBPACK_IMPORTED_MODULE_0__();\n  var segments = (0,_turf_line_segment__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(line);\n  tree.load(segments);\n\n  // Find all segments that are within bbox of splitter\n  var search = tree.search(splitter);\n\n  // Return itself if point is not within spatial index\n  if (!search.features.length) return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.featureCollection)([line]);\n\n  // RBush might return multiple lines - only process the closest line to splitter\n  var closestSegment = findClosestFeature(splitter, search);\n\n  // Initial value is the first point of the first segments (beginning of line)\n  var initialValue = [startPoint];\n  var lastCoords = (0,_turf_meta__WEBPACK_IMPORTED_MODULE_8__.featureReduce)(\n    segments,\n    function (previous, current, index) {\n      var currentCoords = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoords)(current)[1];\n      var splitterCoords = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_7__.getCoord)(splitter);\n\n      // Location where segment intersects with line\n      if (index === closestSegment.id) {\n        previous.push(splitterCoords);\n        results.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.lineString)(previous));\n        // Don't duplicate splitter coordinate (Issue #688)\n        if (pointsEquals(splitterCoords, currentCoords))\n          return [splitterCoords];\n        return [splitterCoords, currentCoords];\n\n        // Keep iterating over coords until finished or intersection is found\n      } else {\n        previous.push(currentCoords);\n        return previous;\n      }\n    },\n    initialValue\n  );\n  // Append last line to final split results\n  if (lastCoords.length > 1) {\n    results.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.lineString)(lastCoords));\n  }\n  return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_9__.featureCollection)(results);\n}\n\n/**\n * Find Closest Feature\n *\n * @private\n * @param {Feature<Point>} point Feature must be closest to this point\n * @param {FeatureCollection<LineString>} lines Collection of Features\n * @returns {Feature<LineString>} closest LineString\n */\nfunction findClosestFeature(point, lines) {\n  if (!lines.features.length) throw new Error(\"lines must contain features\");\n  // Filter to one segment that is the closest to the line\n  if (lines.features.length === 1) return lines.features[0];\n\n  var closestFeature;\n  var closestDistance = Infinity;\n  (0,_turf_meta__WEBPACK_IMPORTED_MODULE_8__.featureEach)(lines, function (segment) {\n    var pt = (0,_turf_nearest_point_on_line__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(segment, point);\n    var dist = pt.properties.dist;\n    if (dist < closestDistance) {\n      closestFeature = segment;\n      closestDistance = dist;\n    }\n  });\n  return closestFeature;\n}\n\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Array<number>} pt1 point\n * @param {Array<number>} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction pointsEquals(pt1, pt2) {\n  return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lineSplit);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+line-split@6.5.0/node_modules/@turf/line-split/dist/es/index.js\n");

/***/ })

};
;