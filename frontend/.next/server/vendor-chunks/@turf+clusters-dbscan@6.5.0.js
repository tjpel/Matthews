"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+clusters-dbscan@6.5.0";
exports.ids = ["vendor-chunks/@turf+clusters-dbscan@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+clusters-dbscan@6.5.0/node_modules/@turf/clusters-dbscan/dist/es/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+clusters-dbscan@6.5.0/node_modules/@turf/clusters-dbscan/dist/es/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _turf_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/clone */ \"(ssr)/./node_modules/.pnpm/@turf+clone@6.5.0/node_modules/@turf/clone/dist/es/index.js\");\n/* harmony import */ var _turf_distance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/distance */ \"(ssr)/./node_modules/.pnpm/@turf+distance@6.5.0/node_modules/@turf/distance/dist/es/index.js\");\n/* harmony import */ var _turf_meta__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/meta */ \"(ssr)/./node_modules/.pnpm/@turf+meta@6.5.0/node_modules/@turf/meta/dist/es/index.js\");\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n/* harmony import */ var density_clustering__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! density-clustering */ \"(ssr)/./node_modules/.pnpm/density-clustering@1.3.0/node_modules/density-clustering/lib/index.js\");\n\n\n\n\n\n/**\n * Takes a set of {@link Point|points} and partition them into clusters according to {@link DBSCAN's|https://en.wikipedia.org/wiki/DBSCAN} data clustering algorithm.\n *\n * @name clustersDbscan\n * @param {FeatureCollection<Point>} points to be clustered\n * @param {number} maxDistance Maximum Distance between any point of the cluster to generate the clusters (kilometers only)\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] in which `maxDistance` is expressed, can be degrees, radians, miles, or kilometers\n * @param {boolean} [options.mutate=false] Allows GeoJSON input to be mutated\n * @param {number} [options.minPoints=3] Minimum number of points to generate a single cluster,\n * points which do not meet this requirement will be classified as an 'edge' or 'noise'.\n * @returns {FeatureCollection<Point>} Clustered Points with an additional two properties associated to each Feature:\n * - {number} cluster - the associated clusterId\n * - {string} dbscan - type of point it has been classified as ('core'|'edge'|'noise')\n * @example\n * // create random points with random z-values in their properties\n * var points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});\n * var maxDistance = 100;\n * var clustered = turf.clustersDbscan(points, maxDistance);\n *\n * //addToMap\n * var addToMap = [clustered];\n */\nfunction clustersDbscan(points, maxDistance, options) {\n    // Input validation being handled by Typescript\n    // collectionOf(points, 'Point', 'points must consist of a FeatureCollection of only Points');\n    // if (maxDistance === null || maxDistance === undefined) throw new Error('maxDistance is required');\n    // if (!(Math.sign(maxDistance) > 0)) throw new Error('maxDistance is invalid');\n    // if (!(minPoints === undefined || minPoints === null || Math.sign(minPoints) > 0)) throw new Error('options.minPoints is invalid');\n    if (options === void 0) { options = {}; }\n    // Clone points to prevent any mutations\n    if (options.mutate !== true)\n        points = (0,_turf_clone__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(points);\n    // Defaults\n    options.minPoints = options.minPoints || 3;\n    // create clustered ids\n    var dbscan = new density_clustering__WEBPACK_IMPORTED_MODULE_4__.DBSCAN();\n    var clusteredIds = dbscan.run((0,_turf_meta__WEBPACK_IMPORTED_MODULE_2__.coordAll)(points), (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_3__.convertLength)(maxDistance, options.units), options.minPoints, _turf_distance__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n    // Tag points to Clusters ID\n    var clusterId = -1;\n    clusteredIds.forEach(function (clusterIds) {\n        clusterId++;\n        // assign cluster ids to input points\n        clusterIds.forEach(function (idx) {\n            var clusterPoint = points.features[idx];\n            if (!clusterPoint.properties)\n                clusterPoint.properties = {};\n            clusterPoint.properties.cluster = clusterId;\n            clusterPoint.properties.dbscan = \"core\";\n        });\n    });\n    // handle noise points, if any\n    // edges points are tagged by DBSCAN as both 'noise' and 'cluster' as they can \"reach\" less than 'minPoints' number of points\n    dbscan.noise.forEach(function (noiseId) {\n        var noisePoint = points.features[noiseId];\n        if (!noisePoint.properties)\n            noisePoint.properties = {};\n        if (noisePoint.properties.cluster)\n            noisePoint.properties.dbscan = \"edge\";\n        else\n            noisePoint.properties.dbscan = \"noise\";\n    });\n    return points;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clustersDbscan);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrY2x1c3RlcnMtZGJzY2FuQDYuNS4wL25vZGVfbW9kdWxlcy9AdHVyZi9jbHVzdGVycy1kYnNjYW4vZGlzdC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0M7QUFDTTtBQUNBO0FBQ1M7QUFDSDtBQUM1QztBQUNBLG1CQUFtQixvQkFBb0IsK0NBQStDLHFEQUFxRDtBQUMzSTtBQUNBO0FBQ0EsV0FBVywwQkFBMEI7QUFDckMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUSxXQUFXO0FBQzlCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkMsTUFBTSxRQUFRO0FBQ2QsTUFBTSxRQUFRO0FBQ2Q7QUFDQTtBQUNBLHVDQUF1QyxzQkFBc0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxpQkFBaUIsdURBQUs7QUFDdEI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNEQUFpQjtBQUN0QyxrQ0FBa0Msb0RBQVEsVUFBVSw0REFBYSxpREFBaUQsc0RBQVE7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlFQUFlLGNBQWMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21mdmFsdWUtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrY2x1c3RlcnMtZGJzY2FuQDYuNS4wL25vZGVfbW9kdWxlcy9AdHVyZi9jbHVzdGVycy1kYnNjYW4vZGlzdC9lcy9pbmRleC5qcz82YzY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbG9uZSBmcm9tIFwiQHR1cmYvY2xvbmVcIjtcbmltcG9ydCBkaXN0YW5jZSBmcm9tIFwiQHR1cmYvZGlzdGFuY2VcIjtcbmltcG9ydCB7IGNvb3JkQWxsIH0gZnJvbSBcIkB0dXJmL21ldGFcIjtcbmltcG9ydCB7IGNvbnZlcnRMZW5ndGgsIH0gZnJvbSBcIkB0dXJmL2hlbHBlcnNcIjtcbmltcG9ydCBjbHVzdGVyaW5nIGZyb20gXCJkZW5zaXR5LWNsdXN0ZXJpbmdcIjtcbi8qKlxuICogVGFrZXMgYSBzZXQgb2Yge0BsaW5rIFBvaW50fHBvaW50c30gYW5kIHBhcnRpdGlvbiB0aGVtIGludG8gY2x1c3RlcnMgYWNjb3JkaW5nIHRvIHtAbGluayBEQlNDQU4nc3xodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EQlNDQU59IGRhdGEgY2x1c3RlcmluZyBhbGdvcml0aG0uXG4gKlxuICogQG5hbWUgY2x1c3RlcnNEYnNjYW5cbiAqIEBwYXJhbSB7RmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+fSBwb2ludHMgdG8gYmUgY2x1c3RlcmVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4RGlzdGFuY2UgTWF4aW11bSBEaXN0YW5jZSBiZXR3ZWVuIGFueSBwb2ludCBvZiB0aGUgY2x1c3RlciB0byBnZW5lcmF0ZSB0aGUgY2x1c3RlcnMgKGtpbG9tZXRlcnMgb25seSlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVuaXRzPVwia2lsb21ldGVyc1wiXSBpbiB3aGljaCBgbWF4RGlzdGFuY2VgIGlzIGV4cHJlc3NlZCwgY2FuIGJlIGRlZ3JlZXMsIHJhZGlhbnMsIG1pbGVzLCBvciBraWxvbWV0ZXJzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm11dGF0ZT1mYWxzZV0gQWxsb3dzIEdlb0pTT04gaW5wdXQgdG8gYmUgbXV0YXRlZFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pblBvaW50cz0zXSBNaW5pbXVtIG51bWJlciBvZiBwb2ludHMgdG8gZ2VuZXJhdGUgYSBzaW5nbGUgY2x1c3RlcixcbiAqIHBvaW50cyB3aGljaCBkbyBub3QgbWVldCB0aGlzIHJlcXVpcmVtZW50IHdpbGwgYmUgY2xhc3NpZmllZCBhcyBhbiAnZWRnZScgb3IgJ25vaXNlJy5cbiAqIEByZXR1cm5zIHtGZWF0dXJlQ29sbGVjdGlvbjxQb2ludD59IENsdXN0ZXJlZCBQb2ludHMgd2l0aCBhbiBhZGRpdGlvbmFsIHR3byBwcm9wZXJ0aWVzIGFzc29jaWF0ZWQgdG8gZWFjaCBGZWF0dXJlOlxuICogLSB7bnVtYmVyfSBjbHVzdGVyIC0gdGhlIGFzc29jaWF0ZWQgY2x1c3RlcklkXG4gKiAtIHtzdHJpbmd9IGRic2NhbiAtIHR5cGUgb2YgcG9pbnQgaXQgaGFzIGJlZW4gY2xhc3NpZmllZCBhcyAoJ2NvcmUnfCdlZGdlJ3wnbm9pc2UnKVxuICogQGV4YW1wbGVcbiAqIC8vIGNyZWF0ZSByYW5kb20gcG9pbnRzIHdpdGggcmFuZG9tIHotdmFsdWVzIGluIHRoZWlyIHByb3BlcnRpZXNcbiAqIHZhciBwb2ludHMgPSB0dXJmLnJhbmRvbVBvaW50KDEwMCwge2Jib3g6IFswLCAzMCwgMjAsIDUwXX0pO1xuICogdmFyIG1heERpc3RhbmNlID0gMTAwO1xuICogdmFyIGNsdXN0ZXJlZCA9IHR1cmYuY2x1c3RlcnNEYnNjYW4ocG9pbnRzLCBtYXhEaXN0YW5jZSk7XG4gKlxuICogLy9hZGRUb01hcFxuICogdmFyIGFkZFRvTWFwID0gW2NsdXN0ZXJlZF07XG4gKi9cbmZ1bmN0aW9uIGNsdXN0ZXJzRGJzY2FuKHBvaW50cywgbWF4RGlzdGFuY2UsIG9wdGlvbnMpIHtcbiAgICAvLyBJbnB1dCB2YWxpZGF0aW9uIGJlaW5nIGhhbmRsZWQgYnkgVHlwZXNjcmlwdFxuICAgIC8vIGNvbGxlY3Rpb25PZihwb2ludHMsICdQb2ludCcsICdwb2ludHMgbXVzdCBjb25zaXN0IG9mIGEgRmVhdHVyZUNvbGxlY3Rpb24gb2Ygb25seSBQb2ludHMnKTtcbiAgICAvLyBpZiAobWF4RGlzdGFuY2UgPT09IG51bGwgfHwgbWF4RGlzdGFuY2UgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdtYXhEaXN0YW5jZSBpcyByZXF1aXJlZCcpO1xuICAgIC8vIGlmICghKE1hdGguc2lnbihtYXhEaXN0YW5jZSkgPiAwKSkgdGhyb3cgbmV3IEVycm9yKCdtYXhEaXN0YW5jZSBpcyBpbnZhbGlkJyk7XG4gICAgLy8gaWYgKCEobWluUG9pbnRzID09PSB1bmRlZmluZWQgfHwgbWluUG9pbnRzID09PSBudWxsIHx8IE1hdGguc2lnbihtaW5Qb2ludHMpID4gMCkpIHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5taW5Qb2ludHMgaXMgaW52YWxpZCcpO1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgLy8gQ2xvbmUgcG9pbnRzIHRvIHByZXZlbnQgYW55IG11dGF0aW9uc1xuICAgIGlmIChvcHRpb25zLm11dGF0ZSAhPT0gdHJ1ZSlcbiAgICAgICAgcG9pbnRzID0gY2xvbmUocG9pbnRzKTtcbiAgICAvLyBEZWZhdWx0c1xuICAgIG9wdGlvbnMubWluUG9pbnRzID0gb3B0aW9ucy5taW5Qb2ludHMgfHwgMztcbiAgICAvLyBjcmVhdGUgY2x1c3RlcmVkIGlkc1xuICAgIHZhciBkYnNjYW4gPSBuZXcgY2x1c3RlcmluZy5EQlNDQU4oKTtcbiAgICB2YXIgY2x1c3RlcmVkSWRzID0gZGJzY2FuLnJ1bihjb29yZEFsbChwb2ludHMpLCBjb252ZXJ0TGVuZ3RoKG1heERpc3RhbmNlLCBvcHRpb25zLnVuaXRzKSwgb3B0aW9ucy5taW5Qb2ludHMsIGRpc3RhbmNlKTtcbiAgICAvLyBUYWcgcG9pbnRzIHRvIENsdXN0ZXJzIElEXG4gICAgdmFyIGNsdXN0ZXJJZCA9IC0xO1xuICAgIGNsdXN0ZXJlZElkcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHVzdGVySWRzKSB7XG4gICAgICAgIGNsdXN0ZXJJZCsrO1xuICAgICAgICAvLyBhc3NpZ24gY2x1c3RlciBpZHMgdG8gaW5wdXQgcG9pbnRzXG4gICAgICAgIGNsdXN0ZXJJZHMuZm9yRWFjaChmdW5jdGlvbiAoaWR4KSB7XG4gICAgICAgICAgICB2YXIgY2x1c3RlclBvaW50ID0gcG9pbnRzLmZlYXR1cmVzW2lkeF07XG4gICAgICAgICAgICBpZiAoIWNsdXN0ZXJQb2ludC5wcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgIGNsdXN0ZXJQb2ludC5wcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICBjbHVzdGVyUG9pbnQucHJvcGVydGllcy5jbHVzdGVyID0gY2x1c3RlcklkO1xuICAgICAgICAgICAgY2x1c3RlclBvaW50LnByb3BlcnRpZXMuZGJzY2FuID0gXCJjb3JlXCI7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIGhhbmRsZSBub2lzZSBwb2ludHMsIGlmIGFueVxuICAgIC8vIGVkZ2VzIHBvaW50cyBhcmUgdGFnZ2VkIGJ5IERCU0NBTiBhcyBib3RoICdub2lzZScgYW5kICdjbHVzdGVyJyBhcyB0aGV5IGNhbiBcInJlYWNoXCIgbGVzcyB0aGFuICdtaW5Qb2ludHMnIG51bWJlciBvZiBwb2ludHNcbiAgICBkYnNjYW4ubm9pc2UuZm9yRWFjaChmdW5jdGlvbiAobm9pc2VJZCkge1xuICAgICAgICB2YXIgbm9pc2VQb2ludCA9IHBvaW50cy5mZWF0dXJlc1tub2lzZUlkXTtcbiAgICAgICAgaWYgKCFub2lzZVBvaW50LnByb3BlcnRpZXMpXG4gICAgICAgICAgICBub2lzZVBvaW50LnByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgaWYgKG5vaXNlUG9pbnQucHJvcGVydGllcy5jbHVzdGVyKVxuICAgICAgICAgICAgbm9pc2VQb2ludC5wcm9wZXJ0aWVzLmRic2NhbiA9IFwiZWRnZVwiO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBub2lzZVBvaW50LnByb3BlcnRpZXMuZGJzY2FuID0gXCJub2lzZVwiO1xuICAgIH0pO1xuICAgIHJldHVybiBwb2ludHM7XG59XG5leHBvcnQgZGVmYXVsdCBjbHVzdGVyc0Ric2NhbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+clusters-dbscan@6.5.0/node_modules/@turf/clusters-dbscan/dist/es/index.js\n");

/***/ })

};
;