"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+point-to-line-distance@6.5.0";
exports.ids = ["vendor-chunks/@turf+point-to-line-distance@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+point-to-line-distance@6.5.0/node_modules/@turf/point-to-line-distance/dist/es/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+point-to-line-distance@6.5.0/node_modules/@turf/point-to-line-distance/dist/es/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _turf_distance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/distance */ \"(ssr)/./node_modules/.pnpm/@turf+distance@6.5.0/node_modules/@turf/distance/dist/es/index.js\");\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/.pnpm/@turf+invariant@6.5.0/node_modules/@turf/invariant/dist/es/index.js\");\n/* harmony import */ var _turf_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turf/meta */ \"(ssr)/./node_modules/.pnpm/@turf+meta@6.5.0/node_modules/@turf/meta/dist/es/index.js\");\n/* harmony import */ var _turf_rhumb_distance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @turf/rhumb-distance */ \"(ssr)/./node_modules/.pnpm/@turf+rhumb-distance@6.5.0/node_modules/@turf/rhumb-distance/dist/es/index.js\");\n// Taken from http://geomalgorithms.com/a02-_lines.html\n\n\n\n\n\n/**\n * Returns the minimum distance between a {@link Point} and a {@link LineString}, being the distance from a line the\n * minimum distance between the point and any segment of the `LineString`.\n *\n * @name pointToLineDistance\n * @param {Feature<Point>|Array<number>} pt Feature or Geometry\n * @param {Feature<LineString>} line GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be anything supported by turf/convertLength\n * (ex: degrees, radians, miles, or kilometers)\n * @param {string} [options.method=\"geodesic\"] wether to calculate the distance based on geodesic (spheroid) or\n * planar (flat) method. Valid options are 'geodesic' or 'planar'.\n * @returns {number} distance between point and line\n * @example\n * var pt = turf.point([0, 0]);\n * var line = turf.lineString([[1, 1],[-1, 1]]);\n *\n * var distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n * //=69.11854715938406\n */\nfunction pointToLineDistance(pt, line, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    if (!options.method) {\n        options.method = \"geodesic\";\n    }\n    if (!options.units) {\n        options.units = \"kilometers\";\n    }\n    // validation\n    if (!pt) {\n        throw new Error(\"pt is required\");\n    }\n    if (Array.isArray(pt)) {\n        pt = (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.point)(pt);\n    }\n    else if (pt.type === \"Point\") {\n        pt = (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.feature)(pt);\n    }\n    else {\n        (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_2__.featureOf)(pt, \"Point\", \"point\");\n    }\n    if (!line) {\n        throw new Error(\"line is required\");\n    }\n    if (Array.isArray(line)) {\n        line = (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.lineString)(line);\n    }\n    else if (line.type === \"LineString\") {\n        line = (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.feature)(line);\n    }\n    else {\n        (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_2__.featureOf)(line, \"LineString\", \"line\");\n    }\n    var distance = Infinity;\n    var p = pt.geometry.coordinates;\n    (0,_turf_meta__WEBPACK_IMPORTED_MODULE_3__.segmentEach)(line, function (segment) {\n        var a = segment.geometry.coordinates[0];\n        var b = segment.geometry.coordinates[1];\n        var d = distanceToSegment(p, a, b, options);\n        if (d < distance) {\n            distance = d;\n        }\n    });\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_1__.convertLength)(distance, \"degrees\", options.units);\n}\n/**\n * Returns the distance between a point P on a segment AB.\n *\n * @private\n * @param {Array<number>} p external point\n * @param {Array<number>} a first segment point\n * @param {Array<number>} b second segment point\n * @param {Object} [options={}] Optional parameters\n * @returns {number} distance\n */\nfunction distanceToSegment(p, a, b, options) {\n    var v = [b[0] - a[0], b[1] - a[1]];\n    var w = [p[0] - a[0], p[1] - a[1]];\n    var c1 = dot(w, v);\n    if (c1 <= 0) {\n        return calcDistance(p, a, { method: options.method, units: \"degrees\" });\n    }\n    var c2 = dot(v, v);\n    if (c2 <= c1) {\n        return calcDistance(p, b, { method: options.method, units: \"degrees\" });\n    }\n    var b2 = c1 / c2;\n    var Pb = [a[0] + b2 * v[0], a[1] + b2 * v[1]];\n    return calcDistance(p, Pb, { method: options.method, units: \"degrees\" });\n}\nfunction dot(u, v) {\n    return u[0] * v[0] + u[1] * v[1];\n}\nfunction calcDistance(a, b, options) {\n    return options.method === \"planar\"\n        ? (0,_turf_rhumb_distance__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(a, b, options)\n        : (0,_turf_distance__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a, b, options);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pointToLineDistance);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrcG9pbnQtdG8tbGluZS1kaXN0YW5jZUA2LjUuMC9ub2RlX21vZHVsZXMvQHR1cmYvcG9pbnQtdG8tbGluZS1kaXN0YW5jZS9kaXN0L2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ3lDO0FBQ2tDO0FBQy9CO0FBQ0g7QUFDWTtBQUNyRDtBQUNBLDJDQUEyQyxhQUFhLE9BQU8saUJBQWlCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOEJBQThCO0FBQ3pDLFdBQVcscUJBQXFCO0FBQ2hDLFdBQVcsUUFBUSxXQUFXO0FBQzlCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxlQUFlO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9EQUFLO0FBQ2xCO0FBQ0E7QUFDQSxhQUFhLHNEQUFPO0FBQ3BCO0FBQ0E7QUFDQSxRQUFRLDBEQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlEQUFVO0FBQ3pCO0FBQ0E7QUFDQSxlQUFlLHNEQUFPO0FBQ3RCO0FBQ0E7QUFDQSxRQUFRLDBEQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLElBQUksdURBQVc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyw0REFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZUFBZTtBQUMxQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRLFdBQVc7QUFDOUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQ0FBMEM7QUFDOUU7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBDQUEwQztBQUM5RTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsMENBQTBDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0VBQWlCO0FBQzNCLFVBQVUsMERBQVc7QUFDckI7QUFDQSxpRUFBZSxtQkFBbUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21mdmFsdWUtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrcG9pbnQtdG8tbGluZS1kaXN0YW5jZUA2LjUuMC9ub2RlX21vZHVsZXMvQHR1cmYvcG9pbnQtdG8tbGluZS1kaXN0YW5jZS9kaXN0L2VzL2luZGV4LmpzP2NjMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGFrZW4gZnJvbSBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwMi1fbGluZXMuaHRtbFxuaW1wb3J0IGdldERpc3RhbmNlIGZyb20gXCJAdHVyZi9kaXN0YW5jZVwiO1xuaW1wb3J0IHsgY29udmVydExlbmd0aCwgZmVhdHVyZSwgbGluZVN0cmluZywgcG9pbnQsIH0gZnJvbSBcIkB0dXJmL2hlbHBlcnNcIjtcbmltcG9ydCB7IGZlYXR1cmVPZiB9IGZyb20gXCJAdHVyZi9pbnZhcmlhbnRcIjtcbmltcG9ydCB7IHNlZ21lbnRFYWNoIH0gZnJvbSBcIkB0dXJmL21ldGFcIjtcbmltcG9ydCBnZXRQbGFuYXJEaXN0YW5jZSBmcm9tIFwiQHR1cmYvcmh1bWItZGlzdGFuY2VcIjtcbi8qKlxuICogUmV0dXJucyB0aGUgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIGEge0BsaW5rIFBvaW50fSBhbmQgYSB7QGxpbmsgTGluZVN0cmluZ30sIGJlaW5nIHRoZSBkaXN0YW5jZSBmcm9tIGEgbGluZSB0aGVcbiAqIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9pbnQgYW5kIGFueSBzZWdtZW50IG9mIHRoZSBgTGluZVN0cmluZ2AuXG4gKlxuICogQG5hbWUgcG9pbnRUb0xpbmVEaXN0YW5jZVxuICogQHBhcmFtIHtGZWF0dXJlPFBvaW50PnxBcnJheTxudW1iZXI+fSBwdCBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge0ZlYXR1cmU8TGluZVN0cmluZz59IGxpbmUgR2VvSlNPTiBGZWF0dXJlIG9yIEdlb21ldHJ5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy51bml0cz1cImtpbG9tZXRlcnNcIl0gY2FuIGJlIGFueXRoaW5nIHN1cHBvcnRlZCBieSB0dXJmL2NvbnZlcnRMZW5ndGhcbiAqIChleDogZGVncmVlcywgcmFkaWFucywgbWlsZXMsIG9yIGtpbG9tZXRlcnMpXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubWV0aG9kPVwiZ2VvZGVzaWNcIl0gd2V0aGVyIHRvIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmFzZWQgb24gZ2VvZGVzaWMgKHNwaGVyb2lkKSBvclxuICogcGxhbmFyIChmbGF0KSBtZXRob2QuIFZhbGlkIG9wdGlvbnMgYXJlICdnZW9kZXNpYycgb3IgJ3BsYW5hcicuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIHBvaW50IGFuZCBsaW5lXG4gKiBAZXhhbXBsZVxuICogdmFyIHB0ID0gdHVyZi5wb2ludChbMCwgMF0pO1xuICogdmFyIGxpbmUgPSB0dXJmLmxpbmVTdHJpbmcoW1sxLCAxXSxbLTEsIDFdXSk7XG4gKlxuICogdmFyIGRpc3RhbmNlID0gdHVyZi5wb2ludFRvTGluZURpc3RhbmNlKHB0LCBsaW5lLCB7dW5pdHM6ICdtaWxlcyd9KTtcbiAqIC8vPTY5LjExODU0NzE1OTM4NDA2XG4gKi9cbmZ1bmN0aW9uIHBvaW50VG9MaW5lRGlzdGFuY2UocHQsIGxpbmUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICBpZiAoIW9wdGlvbnMubWV0aG9kKSB7XG4gICAgICAgIG9wdGlvbnMubWV0aG9kID0gXCJnZW9kZXNpY1wiO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMudW5pdHMpIHtcbiAgICAgICAgb3B0aW9ucy51bml0cyA9IFwia2lsb21ldGVyc1wiO1xuICAgIH1cbiAgICAvLyB2YWxpZGF0aW9uXG4gICAgaWYgKCFwdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwdCBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHQpKSB7XG4gICAgICAgIHB0ID0gcG9pbnQocHQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwdC50eXBlID09PSBcIlBvaW50XCIpIHtcbiAgICAgICAgcHQgPSBmZWF0dXJlKHB0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZlYXR1cmVPZihwdCwgXCJQb2ludFwiLCBcInBvaW50XCIpO1xuICAgIH1cbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibGluZSBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobGluZSkpIHtcbiAgICAgICAgbGluZSA9IGxpbmVTdHJpbmcobGluZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxpbmUudHlwZSA9PT0gXCJMaW5lU3RyaW5nXCIpIHtcbiAgICAgICAgbGluZSA9IGZlYXR1cmUobGluZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmZWF0dXJlT2YobGluZSwgXCJMaW5lU3RyaW5nXCIsIFwibGluZVwiKTtcbiAgICB9XG4gICAgdmFyIGRpc3RhbmNlID0gSW5maW5pdHk7XG4gICAgdmFyIHAgPSBwdC5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICBzZWdtZW50RWFjaChsaW5lLCBmdW5jdGlvbiAoc2VnbWVudCkge1xuICAgICAgICB2YXIgYSA9IHNlZ21lbnQuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF07XG4gICAgICAgIHZhciBiID0gc2VnbWVudC5nZW9tZXRyeS5jb29yZGluYXRlc1sxXTtcbiAgICAgICAgdmFyIGQgPSBkaXN0YW5jZVRvU2VnbWVudChwLCBhLCBiLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGQgPCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgZGlzdGFuY2UgPSBkO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnZlcnRMZW5ndGgoZGlzdGFuY2UsIFwiZGVncmVlc1wiLCBvcHRpb25zLnVuaXRzKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBhIHBvaW50IFAgb24gYSBzZWdtZW50IEFCLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHAgZXh0ZXJuYWwgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYSBmaXJzdCBzZWdtZW50IHBvaW50XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGIgc2Vjb25kIHNlZ21lbnQgcG9pbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gT3B0aW9uYWwgcGFyYW1ldGVyc1xuICogQHJldHVybnMge251bWJlcn0gZGlzdGFuY2VcbiAqL1xuZnVuY3Rpb24gZGlzdGFuY2VUb1NlZ21lbnQocCwgYSwgYiwgb3B0aW9ucykge1xuICAgIHZhciB2ID0gW2JbMF0gLSBhWzBdLCBiWzFdIC0gYVsxXV07XG4gICAgdmFyIHcgPSBbcFswXSAtIGFbMF0sIHBbMV0gLSBhWzFdXTtcbiAgICB2YXIgYzEgPSBkb3Qodywgdik7XG4gICAgaWYgKGMxIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbGNEaXN0YW5jZShwLCBhLCB7IG1ldGhvZDogb3B0aW9ucy5tZXRob2QsIHVuaXRzOiBcImRlZ3JlZXNcIiB9KTtcbiAgICB9XG4gICAgdmFyIGMyID0gZG90KHYsIHYpO1xuICAgIGlmIChjMiA8PSBjMSkge1xuICAgICAgICByZXR1cm4gY2FsY0Rpc3RhbmNlKHAsIGIsIHsgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCwgdW5pdHM6IFwiZGVncmVlc1wiIH0pO1xuICAgIH1cbiAgICB2YXIgYjIgPSBjMSAvIGMyO1xuICAgIHZhciBQYiA9IFthWzBdICsgYjIgKiB2WzBdLCBhWzFdICsgYjIgKiB2WzFdXTtcbiAgICByZXR1cm4gY2FsY0Rpc3RhbmNlKHAsIFBiLCB7IG1ldGhvZDogb3B0aW9ucy5tZXRob2QsIHVuaXRzOiBcImRlZ3JlZXNcIiB9KTtcbn1cbmZ1bmN0aW9uIGRvdCh1LCB2KSB7XG4gICAgcmV0dXJuIHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV07XG59XG5mdW5jdGlvbiBjYWxjRGlzdGFuY2UoYSwgYiwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLm1ldGhvZCA9PT0gXCJwbGFuYXJcIlxuICAgICAgICA/IGdldFBsYW5hckRpc3RhbmNlKGEsIGIsIG9wdGlvbnMpXG4gICAgICAgIDogZ2V0RGlzdGFuY2UoYSwgYiwgb3B0aW9ucyk7XG59XG5leHBvcnQgZGVmYXVsdCBwb2ludFRvTGluZURpc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+point-to-line-distance@6.5.0/node_modules/@turf/point-to-line-distance/dist/es/index.js\n");

/***/ })

};
;