"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/radar-sdk-js@4.1.11_maplibre-gl@3.5.1";
exports.ids = ["vendor-chunks/radar-sdk-js@4.1.11_maplibre-gl@3.5.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.css":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.css ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"254e2445372a\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmFkYXItc2RrLWpzQDQuMS4xMV9tYXBsaWJyZS1nbEAzLjUuMS9ub2RlX21vZHVsZXMvcmFkYXItc2RrLWpzL2Rpc3QvcmFkYXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWZ2YWx1ZS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9yYWRhci1zZGstanNANC4xLjExX21hcGxpYnJlLWdsQDMuNS4xL25vZGVfbW9kdWxlcy9yYWRhci1zZGstanMvZGlzdC9yYWRhci5jc3M/M2RmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjI1NGUyNDQ1MzcyYVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Radar)\n/* harmony export */ });\n/* harmony import */ var maplibre_gl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! maplibre-gl */ \"(ssr)/./node_modules/.pnpm/maplibre-gl@3.5.1/node_modules/maplibre-gl/dist/maplibre-gl.js\");\n\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    Config.setup = function (options) {\n        if (options === void 0) { options = {}; }\n        Config.options = options;\n    };\n    Config.get = function () {\n        return Config.options || {};\n    };\n    Config.clear = function () {\n        Config.options = {};\n    };\n    Config.defaultOptions = {\n        live: false,\n        logLevel: 'error',\n        host: 'https://api.radar.io',\n        version: 'v1',\n        debug: false,\n    };\n    return Config;\n}());\n\nvar LOG_LEVELS = {\n    none: 0,\n    error: 1,\n    warn: 2,\n    info: 3,\n    debug: 4,\n};\n// get the numeric level for logLevel option\nvar getLevel = function () {\n    // disable logging in tests\n    if (window && window.RADAR_TEST_ENV) {\n        return LOG_LEVELS.none;\n    }\n    var _a = Config.get(), logLevel = _a.logLevel, debug = _a.debug;\n    if (debug) {\n        return LOG_LEVELS.debug;\n    }\n    if (logLevel) {\n        return LOG_LEVELS[logLevel];\n    }\n    return LOG_LEVELS.error; // default to error-level logging if not set\n};\nvar Logger = /** @class */ (function () {\n    function Logger() {\n    }\n    Logger.debug = function (message) {\n        if (getLevel() === LOG_LEVELS.debug) {\n            console.log(\"Radar SDK (debug): \".concat(message.trim()));\n        }\n    };\n    Logger.info = function (message) {\n        if (getLevel() >= LOG_LEVELS.info) {\n            console.log(\"Radar SDK: \".concat(message.trim()));\n        }\n    };\n    Logger.warn = function (message) {\n        if (getLevel() >= LOG_LEVELS.warn) {\n            console.warn(\"Radar SDK: \".concat(message.trim()));\n        }\n    };\n    Logger.error = function (message) {\n        if (getLevel() >= LOG_LEVELS.error) {\n            console.error(\"Radar SDK: \".concat(message.trim()));\n        }\n    };\n    return Logger;\n}());\n\nvar Storage = /** @class */ (function () {\n    function Storage() {\n    }\n    Object.defineProperty(Storage, \"USER_ID\", {\n        // local storage key definitions for identifying track users\n        get: function () {\n            return 'radar-userId';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"DEVICE_ID\", {\n        get: function () {\n            return 'radar-deviceId';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"INSTALL_ID\", {\n        get: function () {\n            return 'radar-installId';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"SESSION_ID\", {\n        get: function () {\n            return 'radar-sessionId';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"DESCRIPTION\", {\n        get: function () {\n            return 'radar-description';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"METADATA\", {\n        get: function () {\n            return 'radar-metadata';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"CACHED_LOCATION\", {\n        get: function () {\n            return 'radar-cached-location';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Storage, \"TRIP_OPTIONS\", {\n        get: function () {\n            return 'radar-trip-options';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Storage.getStorage = function () {\n        var storage = window === null || window === void 0 ? void 0 : window.localStorage;\n        if (!storage) {\n            Logger.warn('localStorage not available.');\n        }\n        return storage;\n    };\n    Storage.setItem = function (key, value) {\n        var storage = this.getStorage();\n        if (!storage) {\n            return;\n        }\n        if (value === undefined || value === null) {\n            return;\n        }\n        storage.setItem(key, value);\n    };\n    Storage.getItem = function (key) {\n        var storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        var value = storage.getItem(key);\n        if (value !== undefined && value !== null) {\n            return value;\n        }\n        return null;\n    };\n    Storage.getJSON = function (key) {\n        var item = this.getItem(key);\n        if (!item) {\n            return null;\n        }\n        try {\n            return JSON.parse(item);\n        }\n        catch (err) {\n            Logger.warn(\"could not getJSON from storage for key: \".concat(key));\n            return null;\n        }\n    };\n    Storage.removeItem = function (key) {\n        var storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        storage.removeItem(key);\n    };\n    Storage.clear = function () {\n        var storage = this.getStorage();\n        if (!storage) {\n            return null;\n        }\n        storage.clear();\n    };\n    return Storage;\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar RadarError = /** @class */ (function (_super) {\n    __extends(RadarError, _super);\n    function RadarError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.status = ''; // to be overridden (support for legacy status)\n        return _this;\n    }\n    return RadarError;\n}(Error));\nvar RadarPublishableKeyError = /** @class */ (function (_super) {\n    __extends(RadarPublishableKeyError, _super);\n    function RadarPublishableKeyError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'RadarPublishableKeyError';\n        _this.status = 'ERROR_PUBLISHABLE_KEY';\n        return _this;\n    }\n    return RadarPublishableKeyError;\n}(RadarError));\nvar RadarLocationError = /** @class */ (function (_super) {\n    __extends(RadarLocationError, _super);\n    function RadarLocationError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'RadarLocationError';\n        _this.status = 'ERROR_LOCATION';\n        return _this;\n    }\n    return RadarLocationError;\n}(RadarError));\nvar RadarLocationPermissionsError = /** @class */ (function (_super) {\n    __extends(RadarLocationPermissionsError, _super);\n    function RadarLocationPermissionsError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'RadarLocationPermissionsError';\n        _this.status = 'ERROR_PERMISSIONS';\n        return _this;\n    }\n    return RadarLocationPermissionsError;\n}(RadarError));\nvar RadarDesktopAppError = /** @class */ (function (_super) {\n    __extends(RadarDesktopAppError, _super);\n    function RadarDesktopAppError() {\n        var _this = _super.call(this, 'Desktop app not running.') || this;\n        _this.name = 'RadarDesktopAppError';\n        _this.status = 'ERROR_DESKTOP_APP';\n        return _this;\n    }\n    return RadarDesktopAppError;\n}(RadarError));\n// HTTP Errors\nvar RadarBadRequestError = /** @class */ (function (_super) {\n    __extends(RadarBadRequestError, _super);\n    function RadarBadRequestError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Bad request.') || this;\n        _this.name = 'RadarBadRequestError';\n        _this.code = 400;\n        _this.response = response;\n        _this.status = 'ERROR_BAD_REQUEST';\n        return _this;\n    }\n    return RadarBadRequestError;\n}(RadarError));\nvar RadarUnauthorizedError = /** @class */ (function (_super) {\n    __extends(RadarUnauthorizedError, _super);\n    function RadarUnauthorizedError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Unauthorized.') || this;\n        _this.name = 'RadarUnauthorizedError';\n        _this.code = 401;\n        _this.response = response;\n        _this.status = 'ERROR_UNAUTHORIZED';\n        return _this;\n    }\n    return RadarUnauthorizedError;\n}(RadarError));\nvar RadarPaymentRequiredError = /** @class */ (function (_super) {\n    __extends(RadarPaymentRequiredError, _super);\n    function RadarPaymentRequiredError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Payment required.') || this;\n        _this.name = 'RadarPaymentRequiredError';\n        _this.code = 402;\n        _this.response = response;\n        _this.status = 'ERROR_PAYMENT_REQUIRED';\n        return _this;\n    }\n    return RadarPaymentRequiredError;\n}(RadarError));\nvar RadarForbiddenError = /** @class */ (function (_super) {\n    __extends(RadarForbiddenError, _super);\n    function RadarForbiddenError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Forbidden.') || this;\n        _this.name = 'RadarForbiddenError';\n        _this.code = 403;\n        _this.response = response;\n        _this.status = 'ERROR_FORBIDDEN';\n        return _this;\n    }\n    return RadarForbiddenError;\n}(RadarError));\nvar RadarNotFoundError = /** @class */ (function (_super) {\n    __extends(RadarNotFoundError, _super);\n    function RadarNotFoundError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Not found.') || this;\n        _this.name = 'RadarNotFoundError';\n        _this.code = 404;\n        _this.response = response;\n        _this.status = 'ERROR_NOT_FOUND';\n        return _this;\n    }\n    return RadarNotFoundError;\n}(RadarError));\nvar RadarRateLimitError = /** @class */ (function (_super) {\n    __extends(RadarRateLimitError, _super);\n    function RadarRateLimitError(response) {\n        var _this = this;\n        var _a, _b;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Rate limit exceeded.') || this;\n        _this.name = 'RadarRateLimitError';\n        _this.code = 429;\n        _this.response = response;\n        _this.type = (_b = response === null || response === void 0 ? void 0 : response.meta) === null || _b === void 0 ? void 0 : _b.type;\n        _this.status = 'ERROR_RATE_LIMIT';\n        return _this;\n    }\n    return RadarRateLimitError;\n}(RadarError));\nvar RadarServerError = /** @class */ (function (_super) {\n    __extends(RadarServerError, _super);\n    function RadarServerError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Internal server error.') || this;\n        _this.name = 'RadarServerError';\n        _this.response = response;\n        _this.status = 'ERROR_SERVER';\n        return _this;\n    }\n    return RadarServerError;\n}(RadarError));\nvar RadarTimeoutError = /** @class */ (function (_super) {\n    __extends(RadarTimeoutError, _super);\n    function RadarTimeoutError() {\n        var _this = _super.call(this, 'Request timed out.') || this;\n        _this.name = 'RadarTimeoutError';\n        _this.status = 'ERROR_TIMED_OUT';\n        return _this;\n    }\n    return RadarTimeoutError;\n}(RadarError));\nvar RadarUnknownError = /** @class */ (function (_super) {\n    __extends(RadarUnknownError, _super);\n    function RadarUnknownError(response) {\n        var _this = this;\n        var _a;\n        _this = _super.call(this, ((_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.message) || 'Something went wrong.') || this;\n        _this.name = 'RadarUnknownError';\n        _this.response = response;\n        _this.status = 'ERROR_UNKNOWN';\n        return _this;\n    }\n    return RadarUnknownError;\n}(RadarError));\nvar RadarAutocompleteContainerNotFound = /** @class */ (function (_super) {\n    __extends(RadarAutocompleteContainerNotFound, _super);\n    function RadarAutocompleteContainerNotFound(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'RadarAutocompleteContainerNotFound';\n        _this.status = 'CONTAINER_NOT_FOUND';\n        return _this;\n    }\n    return RadarAutocompleteContainerNotFound;\n}(RadarError));\n\n// https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError\nvar PERMISSION_ERROR_MESSAGES = {\n    1: 'Permission denied.',\n    2: 'Position unavailable.',\n    3: 'Timeout.',\n};\nvar DEFAULT_POSITION_OPTIONS = {\n    maximumAge: 0,\n    timeout: 1000 * 30,\n    enableHighAccuracy: true,\n};\n// set \"enableHighAccuracy\" for navigator only when desiredAccuracy is \"high\"\nvar useHighAccuracy = function (desiredAccuracy) { return (Boolean(desiredAccuracy === 'high')); };\nvar Navigator = /** @class */ (function () {\n    function Navigator() {\n    }\n    Navigator.getCurrentPosition = function (overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var options = Config.get();\n                        if (!navigator || !navigator.geolocation) {\n                            return reject(new RadarLocationError('navigator.geolocation is not available.'));\n                        }\n                        // use cached location if available and options are set\n                        if (options.cacheLocationMinutes) {\n                            try {\n                                var rawCachedLocation = Storage.getItem(Storage.CACHED_LOCATION);\n                                if (rawCachedLocation) {\n                                    var cachedLocation = JSON.parse(rawCachedLocation);\n                                    var _a = cachedLocation || {}, latitude = _a.latitude, longitude = _a.longitude, accuracy = _a.accuracy, expiresAt = _a.expiresAt;\n                                    if (Date.now() < parseInt(expiresAt)) {\n                                        if (latitude && longitude && accuracy) {\n                                            return resolve({ latitude: latitude, longitude: longitude, accuracy: accuracy });\n                                        }\n                                    }\n                                }\n                            }\n                            catch (e) {\n                                Logger.warn('could not load cached location.');\n                            }\n                        }\n                        // set options from config\n                        var positionOptions = Object.assign({}, DEFAULT_POSITION_OPTIONS);\n                        if (options.locationMaximumAge !== undefined) {\n                            positionOptions.maximumAge = options.locationMaximumAge;\n                        }\n                        if (options.locationTimeout !== undefined) {\n                            positionOptions.timeout = options.locationTimeout;\n                        }\n                        if (options.desiredAccuracy !== undefined) {\n                            positionOptions.enableHighAccuracy = useHighAccuracy(options.desiredAccuracy);\n                        }\n                        // set options from overrides\n                        if (overrides.desiredAccuracy !== undefined) {\n                            positionOptions.enableHighAccuracy = useHighAccuracy(overrides.desiredAccuracy);\n                        }\n                        Logger.info(\"Using geolocation options: \".concat(JSON.stringify(positionOptions)));\n                        // get current location from browser\n                        navigator.geolocation.getCurrentPosition(function (position) {\n                            if (!position || !position.coords) {\n                                return reject(new RadarLocationError('device location return empty coordinates.'));\n                            }\n                            var _a = position.coords, latitude = _a.latitude, longitude = _a.longitude, accuracy = _a.accuracy;\n                            // cache location if option is set\n                            if (options.cacheLocationMinutes) {\n                                var cacheLocationMinutes = Number.parseFloat(options.cacheLocationMinutes);\n                                var updatedAt = Date.now();\n                                var expiresAt = updatedAt + (cacheLocationMinutes * 60 * 1000); // convert to ms\n                                var lastLocation = { latitude: latitude, longitude: longitude, accuracy: accuracy, updatedAt: updatedAt, expiresAt: expiresAt };\n                                Storage.setItem(Storage.CACHED_LOCATION, JSON.stringify(lastLocation));\n                            }\n                            return resolve({ latitude: latitude, longitude: longitude, accuracy: accuracy });\n                        }, function (err) {\n                            if (err && err.code) {\n                                var message = PERMISSION_ERROR_MESSAGES[err.code.toString()] || 'unknown';\n                                return reject(new RadarLocationPermissionsError(message));\n                            }\n                            return reject(new RadarLocationError('Could not determine location.'));\n                        }, positionOptions);\n                    })];\n            });\n        });\n    };\n    Navigator.getPermissionStatus = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        if (!navigator || !navigator.permissions) {\n                            return reject(new RadarLocationError('navigator.permissions is not available.'));\n                        }\n                        navigator.permissions.query({ name: 'geolocation' }).then(function (permissionsStatus) {\n                            var locationAuthorization = 'NOT_DETERMINED';\n                            switch (permissionsStatus.state) {\n                                case 'granted':\n                                    locationAuthorization = 'GRANTED_FOREGROUND';\n                                    break;\n                                case 'denied':\n                                    locationAuthorization = 'DENIED';\n                                    break;\n                                case 'prompt':\n                                    locationAuthorization = 'NOT_DETERMINED';\n                                    break;\n                            }\n                            return resolve(locationAuthorization);\n                        });\n                    })];\n            });\n        });\n    };\n    return Navigator;\n}());\n\nvar SDK_VERSION = '4.1.11';\n\nvar Http = /** @class */ (function () {\n    function Http() {\n    }\n    Http.request = function (_a) {\n        var method = _a.method, path = _a.path, data = _a.data, host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var options = Config.get();\n                        // check for publishableKey on request\n                        var publishableKey = options.publishableKey;\n                        if (!publishableKey) {\n                            reject(new RadarPublishableKeyError('publishableKey not set.'));\n                            return;\n                        }\n                        // setup request URL\n                        var urlHost = host || options.host;\n                        var version = options.version;\n                        var url = \"\".concat(urlHost, \"/\").concat(version, \"/\").concat(path);\n                        // remove undefined values from request data\n                        var body = {};\n                        Object.keys(data || {}).forEach(function (key) {\n                            var value = data[key];\n                            if (value !== undefined) {\n                                body[key] = value;\n                            }\n                        });\n                        // convert data to querystring for GET requests\n                        if (method === 'GET') {\n                            var params = Object.keys(body).map(function (key) { return (\"\".concat(key, \"=\").concat(encodeURIComponent(body[key]))); });\n                            if (params.length > 0) {\n                                var queryString = params.join('&');\n                                url = \"\".concat(url, \"?\").concat(queryString);\n                            }\n                            body = undefined; // dont send body for GET request\n                        }\n                        var xhr = new XMLHttpRequest();\n                        xhr.open(method, url, true);\n                        // set headers\n                        xhr.setRequestHeader('Authorization', publishableKey);\n                        xhr.setRequestHeader('Content-Type', 'application/json');\n                        xhr.setRequestHeader('X-Radar-Device-Type', 'Web');\n                        xhr.setRequestHeader('X-Radar-SDK-Version', SDK_VERSION);\n                        // set custom headers if present\n                        if (typeof options.getRequestHeaders === 'function') {\n                            var headers_1 = options.getRequestHeaders();\n                            Object.keys(headers_1 || {}).forEach(function (key) {\n                                xhr.setRequestHeader(key, headers_1[key]);\n                            });\n                        }\n                        xhr.onload = function () {\n                            var _a;\n                            var response;\n                            try {\n                                response = JSON.parse(xhr.response);\n                            }\n                            catch (e) {\n                                return reject(new RadarServerError(response));\n                            }\n                            var error = (_a = response === null || response === void 0 ? void 0 : response.meta) === null || _a === void 0 ? void 0 : _a.error;\n                            if (error === 'ERROR_PERMISSIONS') {\n                                return reject(new RadarLocationPermissionsError('Location permissions not granted.'));\n                            }\n                            else if (error === 'ERROR_LOCATION') {\n                                return reject(new RadarLocationError('Could not determine location.'));\n                            }\n                            else if (error === 'ERROR_NETWORK') {\n                                return reject(new RadarTimeoutError());\n                            }\n                            if (xhr.status == 200) {\n                                return resolve(response);\n                            }\n                            if (options.debug) {\n                                Logger.debug(\"API call failed: \".concat(url));\n                                Logger.debug(JSON.stringify(response));\n                            }\n                            if (xhr.status === 400) {\n                                reject(new RadarBadRequestError(response));\n                            }\n                            else if (xhr.status === 401) {\n                                reject(new RadarUnauthorizedError(response));\n                            }\n                            else if (xhr.status === 402) {\n                                reject(new RadarPaymentRequiredError(response));\n                            }\n                            else if (xhr.status === 403) {\n                                reject(new RadarForbiddenError(response));\n                            }\n                            else if (xhr.status === 404) {\n                                reject(new RadarNotFoundError(response));\n                            }\n                            else if (xhr.status === 429) {\n                                reject(new RadarRateLimitError(response));\n                            }\n                            else if (500 <= xhr.status && xhr.status < 600) {\n                                reject(new RadarServerError(response));\n                            }\n                            else {\n                                reject(new RadarUnknownError(response));\n                            }\n                        };\n                        xhr.onerror = function () {\n                            if (host && host === 'https://radar-verify.com:52516') {\n                                reject(new RadarDesktopAppError());\n                            }\n                            else {\n                                reject(new RadarServerError());\n                            }\n                        };\n                        xhr.ontimeout = function () {\n                            reject(new RadarTimeoutError());\n                        };\n                        xhr.send(JSON.stringify(body));\n                    })];\n            });\n        });\n    };\n    return Http;\n}());\n\nvar AddressesAPI = /** @class */ (function () {\n    function AddressesAPI() {\n    }\n    AddressesAPI.validateAddress = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, response, address, result, validateAddressRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'addresses/validate',\n                                data: params,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        address = response.address, result = response.result;\n                        validateAddressRes = {\n                            address: address,\n                            result: result,\n                        };\n                        if (options.debug) {\n                            validateAddressRes.response = response;\n                        }\n                        return [2 /*return*/, validateAddressRes];\n                }\n            });\n        });\n    };\n    return AddressesAPI;\n}());\n\nvar generateUUID = function () {\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {\n        var r = Math.random() * 16 | 0;\n        var v = (char == 'x') ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n    return uuid;\n};\nvar Device = /** @class */ (function () {\n    function Device() {\n    }\n    Device.getDeviceId = function () {\n        // use existing deviceId if present\n        var deviceId = Storage.getItem(Storage.DEVICE_ID);\n        if (deviceId) {\n            return deviceId;\n        }\n        // generate new deviceId\n        var uuid = generateUUID();\n        Storage.setItem(Storage.DEVICE_ID, uuid);\n        return uuid;\n    };\n    Device.getInstallId = function () {\n        // use existing installId if present\n        var deviceId = Storage.getItem(Storage.INSTALL_ID);\n        if (deviceId) {\n            return deviceId;\n        }\n        // generate new installId\n        var uuid = generateUUID();\n        Storage.setItem(Storage.INSTALL_ID, uuid);\n        return uuid;\n    };\n    return Device;\n}());\n\nvar SESSION_TIMEOUT_SECS = 300; // 5 mins\nvar isValid = function (sessionId) {\n    var now = Math.trunc(Date.now() / 1000);\n    var session = Number.parseInt(sessionId);\n    var diff = Math.abs(now - session);\n    return diff < SESSION_TIMEOUT_SECS;\n};\nvar Session = /** @class */ (function () {\n    function Session() {\n    }\n    Session.getSessionId = function () {\n        var sessionId = Storage.getItem(Storage.SESSION_ID);\n        // reuse session if still within 5 min threshold\n        if (sessionId && isValid(sessionId)) {\n            return sessionId;\n        }\n        // create new session if does not already exist or expired\n        var newSessionId = Math.trunc(Date.now() / 1000).toString(); // unix ts in seconds\n        Storage.setItem(Storage.SESSION_ID, newSessionId);\n        return newSessionId;\n    };\n    return Session;\n}());\n\nvar ConfigAPI = /** @class */ (function () {\n    function ConfigAPI() {\n    }\n    ConfigAPI.getConfig = function (params) {\n        if (params === void 0) { params = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var options, deviceId, installId, sessionId, locationAuthorization, data, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        if (options.version != 'v1') {\n                            Logger.info('Skipping /config call.');\n                            return [2 /*return*/];\n                        }\n                        deviceId = params.deviceId || Device.getDeviceId();\n                        installId = params.installId || Device.getInstallId();\n                        sessionId = Session.getSessionId();\n                        return [4 /*yield*/, Navigator.getPermissionStatus()];\n                    case 1:\n                        locationAuthorization = _a.sent();\n                        data = {\n                            deviceId: deviceId,\n                            installId: installId,\n                            sessionId: sessionId,\n                            locationAuthorization: locationAuthorization,\n                        };\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'config',\n                                data: data,\n                            })];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        Logger.warn(\"Error calling /config: \".concat(err_1.message));\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ConfigAPI;\n}());\n\nvar ContextAPI = /** @class */ (function () {\n    function ContextAPI() {\n    }\n    ContextAPI.getContext = function (location) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, latitude, longitude, accuracy, response, geofences, place, country, state, dma, postalCode, contextRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        if (!(!location.latitude || !location.longitude)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        location = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        latitude = location.latitude, longitude = location.longitude, accuracy = location.accuracy;\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'context',\n                                data: {\n                                    coordinates: \"\".concat(latitude, \",\").concat(longitude),\n                                    accuracy: accuracy,\n                                },\n                            })];\n                    case 3:\n                        response = _a.sent();\n                        geofences = response.geofences, place = response.place, country = response.country, state = response.state, dma = response.dma, postalCode = response.postalCode;\n                        contextRes = {\n                            location: location,\n                            geofences: geofences,\n                            place: place,\n                            country: country,\n                            state: state,\n                            dma: dma,\n                            postalCode: postalCode,\n                        };\n                        if (options.debug) {\n                            contextRes.response = response;\n                        }\n                        return [2 /*return*/, contextRes];\n                }\n            });\n        });\n    };\n    return ContextAPI;\n}());\n\nvar ConversionsAPI = /** @class */ (function () {\n    function ConversionsAPI() {\n    }\n    ConversionsAPI.logConversion = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, name, userId, deviceId, installId, metadata, createdAt, data, response, conversionRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        name = params.name;\n                        userId = params.userId || Storage.getItem(Storage.USER_ID);\n                        deviceId = params.deviceId || Device.getDeviceId();\n                        installId = params.installId || Device.getInstallId();\n                        metadata = params.metadata || {};\n                        createdAt = params.createdAt;\n                        if (params.revenue) {\n                            metadata.revenue = params.revenue;\n                        }\n                        data = {\n                            name: name,\n                            userId: userId,\n                            deviceId: deviceId,\n                            installId: installId,\n                            metadata: metadata,\n                        };\n                        if (typeof createdAt === 'string') {\n                            data.createdAt = createdAt;\n                        }\n                        else if (createdAt instanceof Date) {\n                            data.createdAt = createdAt.toISOString();\n                        }\n                        else {\n                            data.createdAt = (new Date()).toISOString();\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'POST',\n                                path: 'events',\n                                data: data,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        conversionRes = {\n                            event: response.event,\n                        };\n                        if (options.debug) {\n                            conversionRes.response = response;\n                        }\n                        return [2 /*return*/, conversionRes];\n                }\n            });\n        });\n    };\n    return ConversionsAPI;\n}());\n\nvar Geocoding = /** @class */ (function () {\n    function Geocoding() {\n    }\n    Geocoding.forwardGeocode = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, query, layers, country, response, forwardGeocodeRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        query = params.query, layers = params.layers, country = params.country;\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'geocode/forward',\n                                data: {\n                                    query: query,\n                                    layers: layers,\n                                    country: country,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        forwardGeocodeRes = {\n                            addresses: response.addresses,\n                        };\n                        if (options.debug) {\n                            forwardGeocodeRes.response = response;\n                        }\n                        return [2 /*return*/, forwardGeocodeRes];\n                }\n            });\n        });\n    };\n    Geocoding.reverseGeocode = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, latitude, longitude, layers, location_1, response, reverseGeocodeRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        latitude = params.latitude, longitude = params.longitude, layers = params.layers;\n                        if (!(!latitude || !longitude)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        location_1 = _a.sent();\n                        latitude = location_1.latitude;\n                        longitude = location_1.longitude;\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, Http.request({\n                            method: 'GET',\n                            path: 'geocode/reverse',\n                            data: {\n                                coordinates: \"\".concat(latitude, \",\").concat(longitude),\n                                layers: layers,\n                            },\n                        })];\n                    case 3:\n                        response = _a.sent();\n                        reverseGeocodeRes = {\n                            addresses: response.addresses,\n                        };\n                        if (options.debug) {\n                            reverseGeocodeRes.response = response;\n                        }\n                        return [2 /*return*/, reverseGeocodeRes];\n                }\n            });\n        });\n    };\n    Geocoding.ipGeocode = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, response, ipGeocodeRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'geocode/ip',\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        ipGeocodeRes = {\n                            ip: response.ip,\n                            address: response.address,\n                            proxy: response.proxy,\n                        };\n                        if (options.debug) {\n                            ipGeocodeRes.response = response;\n                        }\n                        return [2 /*return*/, ipGeocodeRes];\n                }\n            });\n        });\n    };\n    return Geocoding;\n}());\n\nvar RoutingAPI = /** @class */ (function () {\n    function RoutingAPI() {\n    }\n    RoutingAPI.distance = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, origin, destination, modes, units, geometry, geometryPoints, _a, latitude, longitude, latitude, longitude, latitude, longitude, response, distanceRes;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        options = Config.get();\n                        origin = params.origin, destination = params.destination, modes = params.modes, units = params.units, geometry = params.geometry, geometryPoints = params.geometryPoints;\n                        if (!!origin) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        _a = _b.sent(), latitude = _a.latitude, longitude = _a.longitude;\n                        origin = \"\".concat(latitude, \",\").concat(longitude);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (typeof origin !== 'string') { // origin is \"Location\" object\n                            latitude = origin.latitude, longitude = origin.longitude;\n                            origin = \"\".concat(latitude, \",\").concat(longitude);\n                        }\n                        _b.label = 3;\n                    case 3:\n                        if (typeof destination !== 'string') {\n                            latitude = destination.latitude, longitude = destination.longitude;\n                            destination = \"\".concat(latitude, \",\").concat(longitude);\n                        }\n                        if (Array.isArray(modes)) {\n                            modes = modes.join(',');\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'route/distance',\n                                data: {\n                                    origin: origin,\n                                    destination: destination,\n                                    modes: modes,\n                                    units: units,\n                                    geometry: geometry,\n                                    geometryPoints: geometryPoints,\n                                },\n                            })];\n                    case 4:\n                        response = _b.sent();\n                        distanceRes = {\n                            routes: response.routes,\n                        };\n                        if (options.debug) {\n                            distanceRes.response = response;\n                        }\n                        return [2 /*return*/, distanceRes];\n                }\n            });\n        });\n    };\n    RoutingAPI.matrix = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, origins, destinations, mode, units, _a, latitude, longitude, originStrings, i, response, matrixRes;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        options = Config.get();\n                        origins = params.origins, destinations = params.destinations, mode = params.mode, units = params.units;\n                        if (!!origins) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        _a = _b.sent(), latitude = _a.latitude, longitude = _a.longitude;\n                        originStrings = [];\n                        for (i = 0; i < destinations.length; i++) {\n                            originStrings.push(\"\".concat(latitude, \",\").concat(longitude));\n                        }\n                        origins = originStrings.join('|');\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (Array.isArray(origins)) { // origin is a list of \"Location\" objects\n                            origins = origins.map(function (location) { return \"\".concat(location.latitude, \",\").concat(location.longitude); }).join('|');\n                        }\n                        _b.label = 3;\n                    case 3:\n                        // convert array to pipe-delimited string\n                        if (Array.isArray(destinations)) {\n                            destinations = destinations.map(function (location) { return \"\".concat(location.latitude, \",\").concat(location.longitude); }).join('|');\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'route/matrix',\n                                data: {\n                                    origins: origins,\n                                    destinations: destinations,\n                                    mode: mode,\n                                    units: units,\n                                },\n                            })];\n                    case 4:\n                        response = _b.sent();\n                        matrixRes = {\n                            origins: response.origins,\n                            destinations: response.destinations,\n                            matrix: response.matrix,\n                        };\n                        if (options.debug) {\n                            matrixRes.response = response;\n                        }\n                        return [2 /*return*/, matrixRes];\n                }\n            });\n        });\n    };\n    return RoutingAPI;\n}());\n\nvar SearchAPI = /** @class */ (function () {\n    function SearchAPI() {\n    }\n    SearchAPI.autocomplete = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, query, near, limit, layers, countryCode, expandUnits, response, autocompleteRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        query = params.query, near = params.near, limit = params.limit, layers = params.layers, countryCode = params.countryCode, expandUnits = params.expandUnits;\n                        // near can be provided as a string or Location object\n                        // if \"near\" is not provided, request will fallback to IP based location\n                        if (near && typeof near !== 'string') {\n                            if (near.latitude && near.longitude) {\n                                near = \"\".concat(near.latitude, \",\").concat(near.longitude);\n                            }\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'search/autocomplete',\n                                data: {\n                                    query: query,\n                                    near: near,\n                                    limit: limit,\n                                    layers: layers,\n                                    countryCode: countryCode,\n                                    expandUnits: expandUnits,\n                                },\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        autocompleteRes = {\n                            addresses: response.addresses,\n                        };\n                        if (options.debug) {\n                            autocompleteRes.response = response;\n                        }\n                        return [2 /*return*/, autocompleteRes];\n                }\n            });\n        });\n    };\n    SearchAPI.searchGeofences = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, near, radius, tags, metadata, limit, _a, latitude, longitude, latitude, longitude, response, geofencesSearchRes;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        options = Config.get();\n                        near = params.near, radius = params.radius, tags = params.tags, metadata = params.metadata, limit = params.limit;\n                        if (!!near) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        _a = _b.sent(), latitude = _a.latitude, longitude = _a.longitude;\n                        near = \"\".concat(latitude, \",\").concat(longitude);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (typeof near !== 'string') { // near is \"Location\" object\n                            latitude = near.latitude, longitude = near.longitude;\n                            near = \"\".concat(latitude, \",\").concat(longitude);\n                        }\n                        _b.label = 3;\n                    case 3:\n                        // convert arrays to comma-strings\n                        if (Array.isArray(tags)) {\n                            tags = tags.join(',');\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'search/geofences',\n                                data: {\n                                    near: near,\n                                    radius: radius,\n                                    tags: tags,\n                                    metadata: metadata,\n                                    limit: limit,\n                                },\n                            })];\n                    case 4:\n                        response = _b.sent();\n                        geofencesSearchRes = {\n                            geofences: response.geofences,\n                        };\n                        if (options.debug) {\n                            geofencesSearchRes.response = response;\n                        }\n                        return [2 /*return*/, geofencesSearchRes];\n                }\n            });\n        });\n    };\n    SearchAPI.searchPlaces = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, near, radius, chains, categories, groups, limit, _a, latitude, longitude, latitude, longitude, response, placeSearchRes;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        options = Config.get();\n                        near = params.near, radius = params.radius, chains = params.chains, categories = params.categories, groups = params.groups, limit = params.limit;\n                        if (!!near) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition()];\n                    case 1:\n                        _a = _b.sent(), latitude = _a.latitude, longitude = _a.longitude;\n                        near = \"\".concat(latitude, \",\").concat(longitude);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (typeof near !== 'string') { // near is \"Location\" object\n                            latitude = near.latitude, longitude = near.longitude;\n                            near = \"\".concat(latitude, \",\").concat(longitude);\n                        }\n                        _b.label = 3;\n                    case 3:\n                        // convert arrays to comma-strings\n                        if (Array.isArray(chains)) {\n                            chains = chains.join(',');\n                        }\n                        if (Array.isArray(categories)) {\n                            categories = categories.join(',');\n                        }\n                        if (Array.isArray(groups)) {\n                            groups = groups.join(',');\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'search/places',\n                                data: {\n                                    near: near,\n                                    radius: radius,\n                                    chains: chains,\n                                    categories: categories,\n                                    groups: groups,\n                                    limit: limit,\n                                },\n                            })];\n                    case 4:\n                        response = _b.sent();\n                        placeSearchRes = {\n                            places: response.places,\n                        };\n                        if (options.debug) {\n                            placeSearchRes.response = response;\n                        }\n                        return [2 /*return*/, placeSearchRes];\n                }\n            });\n        });\n    };\n    return SearchAPI;\n}());\n\n// https://stackoverflow.com/a/44198641\nvar isValidDate = function (date) { return date && Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date); };\nvar TripsAPI = /** @class */ (function () {\n    function TripsAPI() {\n    }\n    TripsAPI.setTripOptions = function (tripOptions) {\n        if (!tripOptions) {\n            TripsAPI.clearTripOptions();\n            return;\n        }\n        var tripOptionsString = JSON.stringify(tripOptions);\n        Logger.debug(\"Saving trip options: \".concat(tripOptionsString));\n        Storage.setItem(Storage.TRIP_OPTIONS, tripOptionsString);\n    };\n    TripsAPI.getTripOptions = function () {\n        var tripOptions = Storage.getItem(Storage.TRIP_OPTIONS);\n        if (tripOptions) {\n            tripOptions = JSON.parse(tripOptions);\n        }\n        return tripOptions;\n    };\n    TripsAPI.clearTripOptions = function () {\n        Storage.removeItem(Storage.TRIP_OPTIONS);\n    };\n    TripsAPI.startTrip = function (tripOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, userId, externalId, destinationGeofenceTag, destinationGeofenceExternalId, mode, metadata, approachingThreshold, scheduledArrivalAt, data, response, tripRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        tripOptions = tripOptions || TripsAPI.getTripOptions();\n                        if (!tripOptions) {\n                            Logger.warn('tripOptions not set when calling \"startTrip\"');\n                        }\n                        userId = tripOptions.userId || Storage.getItem(Storage.USER_ID);\n                        if (userId && userId !== Storage.getItem(Storage.USER_ID)) {\n                            // set as userId for tracking if provided\n                            Storage.setItem(Storage.USER_ID, userId);\n                        }\n                        externalId = tripOptions.externalId, destinationGeofenceTag = tripOptions.destinationGeofenceTag, destinationGeofenceExternalId = tripOptions.destinationGeofenceExternalId, mode = tripOptions.mode, metadata = tripOptions.metadata, approachingThreshold = tripOptions.approachingThreshold, scheduledArrivalAt = tripOptions.scheduledArrivalAt;\n                        data = {\n                            userId: userId,\n                            externalId: externalId,\n                            destinationGeofenceTag: destinationGeofenceTag,\n                            destinationGeofenceExternalId: destinationGeofenceExternalId,\n                            mode: mode,\n                            metadata: metadata,\n                            approachingThreshold: approachingThreshold,\n                        };\n                        if (isValidDate(scheduledArrivalAt)) {\n                            data.scheduledArrivalAt = scheduledArrivalAt === null || scheduledArrivalAt === void 0 ? void 0 : scheduledArrivalAt.toJSON();\n                        }\n                        else {\n                            if (scheduledArrivalAt) {\n                                Logger.warn('Invalid date format for scheduledArrivalAt');\n                            }\n                            data.scheduledArrivalAt = undefined;\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'POST',\n                                path: 'trips',\n                                data: data,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        // save trip options\n                        TripsAPI.setTripOptions(tripOptions);\n                        tripRes = {\n                            trip: response.trip,\n                            events: response.events,\n                        };\n                        if (options.debug) {\n                            tripRes.response = response;\n                        }\n                        return [2 /*return*/, tripRes];\n                }\n            });\n        });\n    };\n    TripsAPI.updateTrip = function (tripOptions, status) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, externalId, destinationGeofenceTag, destinationGeofenceExternalId, mode, metadata, approachingThreshold, scheduledArrivalAt, data, response, tripRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        tripOptions = tripOptions || TripsAPI.getTripOptions();\n                        if (!tripOptions) {\n                            Logger.warn('tripOptions not set when calling \"startTrip\"');\n                        }\n                        externalId = tripOptions.externalId, destinationGeofenceTag = tripOptions.destinationGeofenceTag, destinationGeofenceExternalId = tripOptions.destinationGeofenceExternalId, mode = tripOptions.mode, metadata = tripOptions.metadata, approachingThreshold = tripOptions.approachingThreshold, scheduledArrivalAt = tripOptions.scheduledArrivalAt;\n                        data = {\n                            status: status,\n                            externalId: externalId,\n                            destinationGeofenceTag: destinationGeofenceTag,\n                            destinationGeofenceExternalId: destinationGeofenceExternalId,\n                            mode: mode,\n                            metadata: metadata,\n                            approachingThreshold: approachingThreshold,\n                        };\n                        if (isValidDate(scheduledArrivalAt)) {\n                            data.scheduledArrivalAt = scheduledArrivalAt === null || scheduledArrivalAt === void 0 ? void 0 : scheduledArrivalAt.toJSON();\n                        }\n                        else {\n                            if (scheduledArrivalAt) {\n                                Logger.warn('Invalid date format for scheduledArrivalAt');\n                            }\n                            data.scheduledArrivalAt = undefined;\n                        }\n                        return [4 /*yield*/, Http.request({\n                                method: 'PATCH',\n                                path: \"trips/\".concat(externalId, \"/update\"),\n                                data: data,\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        tripRes = {\n                            trip: response.trip,\n                            events: response.events,\n                        };\n                        if (options.debug) {\n                            tripRes.response = response;\n                        }\n                        return [2 /*return*/, tripRes];\n                }\n            });\n        });\n    };\n    TripsAPI.completeTrip = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tripOptions, tripResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tripOptions = TripsAPI.getTripOptions();\n                        return [4 /*yield*/, TripsAPI.updateTrip(tripOptions, 'completed')];\n                    case 1:\n                        tripResponse = _a.sent();\n                        // clear local trip options\n                        TripsAPI.clearTripOptions();\n                        return [2 /*return*/, tripResponse];\n                }\n            });\n        });\n    };\n    TripsAPI.cancelTrip = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tripOptions, tripResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tripOptions = TripsAPI.getTripOptions();\n                        return [4 /*yield*/, TripsAPI.updateTrip(tripOptions, 'canceled')];\n                    case 1:\n                        tripResponse = _a.sent();\n                        // clear local trip options\n                        TripsAPI.clearTripOptions();\n                        return [2 /*return*/, tripResponse];\n                }\n            });\n        });\n    };\n    return TripsAPI;\n}());\n\nvar TrackAPI = /** @class */ (function () {\n    function TrackAPI() {\n    }\n    TrackAPI.trackOnce = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var options, latitude, longitude, accuracy, desiredAccuracy, deviceLocation, locationAuthorization, err_1, userId, deviceId, installId, sessionId, deviceType, description, metadata, tripOptions, body, response, user, events, location, trackRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        latitude = params.latitude, longitude = params.longitude, accuracy = params.accuracy, desiredAccuracy = params.desiredAccuracy;\n                        if (!(!latitude || !longitude)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Navigator.getCurrentPosition({ desiredAccuracy: desiredAccuracy })];\n                    case 1:\n                        deviceLocation = _a.sent();\n                        latitude = deviceLocation.latitude;\n                        longitude = deviceLocation.longitude;\n                        accuracy = deviceLocation.accuracy;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, Navigator.getPermissionStatus()];\n                    case 3:\n                        locationAuthorization = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        Logger.warn(\"Location authorization error: \".concat(err_1.message));\n                        return [3 /*break*/, 5];\n                    case 5:\n                        userId = params.userId || Storage.getItem(Storage.USER_ID);\n                        deviceId = params.deviceId || Device.getDeviceId();\n                        installId = params.installId || Device.getInstallId();\n                        sessionId = Session.getSessionId();\n                        deviceType = params.deviceType || 'Web';\n                        description = params.description || Storage.getItem(Storage.DESCRIPTION);\n                        // save userId for trip tracking\n                        if (!userId) {\n                            Logger.warn('userId not provided for trackOnce.');\n                        }\n                        else {\n                            Storage.setItem(Storage.USER_ID, userId);\n                        }\n                        metadata = params.metadata || Storage.getJSON(Storage.METADATA);\n                        tripOptions = params.tripOptions || TripsAPI.getTripOptions();\n                        if (tripOptions) {\n                            tripOptions.version = '2';\n                        }\n                        body = __assign(__assign({}, params), { locationAuthorization: locationAuthorization, accuracy: accuracy, description: description, deviceId: deviceId, deviceType: deviceType, foreground: true, installId: installId, sessionId: sessionId, latitude: latitude, longitude: longitude, metadata: metadata, sdkVersion: SDK_VERSION, stopped: true, userId: userId, tripOptions: tripOptions });\n                        return [4 /*yield*/, Http.request({\n                                method: 'POST',\n                                path: 'track',\n                                data: body,\n                            })];\n                    case 6:\n                        response = _a.sent();\n                        user = response.user, events = response.events;\n                        location = { latitude: latitude, longitude: longitude, accuracy: accuracy };\n                        trackRes = {\n                            user: user,\n                            events: events,\n                            location: location,\n                        };\n                        if (options.debug) {\n                            trackRes.response = response;\n                        }\n                        return [2 /*return*/, trackRes];\n                }\n            });\n        });\n    };\n    return TrackAPI;\n}());\n\nvar VerifyAPI = /** @class */ (function () {\n    function VerifyAPI() {\n    }\n    VerifyAPI.trackVerified = function (params, encrypted) {\n        if (encrypted === void 0) { encrypted = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var options, userId, deviceId, installId, sessionId, description, metadata, body, userAgent, mac, response, user, events, token, location, trackTokenRes, trackRes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = Config.get();\n                        userId = params.userId || Storage.getItem(Storage.USER_ID);\n                        deviceId = params.deviceId || Device.getDeviceId();\n                        installId = params.installId || Device.getInstallId();\n                        sessionId = Session.getSessionId();\n                        description = params.description || Storage.getItem(Storage.DESCRIPTION);\n                        // save userId\n                        if (!userId) {\n                            Logger.warn('userId not provided for trackVerified.');\n                        }\n                        else {\n                            Storage.setItem(Storage.USER_ID, userId);\n                        }\n                        metadata = params.metadata || Storage.getJSON(Storage.METADATA);\n                        body = __assign(__assign({}, params), { description: description, deviceId: deviceId, foreground: true, installId: installId, sessionId: sessionId, metadata: metadata, sdkVersion: SDK_VERSION, stopped: true, userId: userId, encrypted: encrypted });\n                        userAgent = navigator.userAgent;\n                        mac = userAgent && userAgent.toLowerCase().includes('mac');\n                        return [4 /*yield*/, Http.request({\n                                method: 'GET',\n                                path: 'verify',\n                                data: body,\n                                host: mac ? 'https://radar-verify.com:52516' : 'http://localhost:52516',\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        user = response.user, events = response.events, token = response.token;\n                        if (user && user.location && user.location.coordinates && user.locationAccuracy) {\n                            location = {\n                                latitude: user.location.coordinates[1],\n                                longitude: user.location.coordinates[0],\n                                accuracy: user.locationAccuracy,\n                            };\n                        }\n                        if (encrypted) {\n                            trackTokenRes = {\n                                token: token,\n                            };\n                            if (options.debug) {\n                                trackTokenRes.response = response;\n                            }\n                            return [2 /*return*/, trackTokenRes];\n                        }\n                        trackRes = {\n                            user: user,\n                            events: events,\n                            location: location,\n                        };\n                        if (options.debug) {\n                            trackRes.response = response;\n                        }\n                        return [2 /*return*/, trackRes];\n                }\n            });\n        });\n    };\n    return VerifyAPI;\n}());\n\nvar DEFAULT_STYLE = 'radar-default-v1';\nvar RADAR_STYLES = [\n    'radar-default-v1',\n    'radar-light-v1',\n    'radar-dark-v1',\n];\nvar RADAR_LOGO_URL = 'https://api.radar.io/maps/static/images/logo.svg';\nvar defaultMaplibreOptions = {\n    minZoom: 1,\n    maxZoom: 20,\n    attributionControl: false,\n    dragRotate: false,\n    touchPitch: false,\n    maplibreLogo: false,\n};\nvar defaultMarkerOptions = {\n    color: '#000257',\n};\nvar createStyleURL = function (options, style) {\n    if (style === void 0) { style = DEFAULT_STYLE; }\n    return (\"\".concat(options.host, \"/maps/styles/\").concat(style, \"?publishableKey=\").concat(options.publishableKey));\n};\n// use formatted style URL if using one of Radar's out-of-the-box styles\nvar getStyle = function (options, mapOptions) {\n    var style = mapOptions.style;\n    if (!style || (typeof style === 'string' && RADAR_STYLES.includes(style))) {\n        return createStyleURL(options, mapOptions.style);\n    }\n    return mapOptions.style;\n};\nvar MapUI = /** @class */ (function () {\n    function MapUI() {\n    }\n    MapUI.getMapLibre = function () {\n        return maplibre_gl__WEBPACK_IMPORTED_MODULE_0__;\n    };\n    MapUI.createMap = function (mapOptions) {\n        var options = Config.get();\n        if (!options.publishableKey) {\n            Logger.warn('publishableKey not set. Call Radar.initialize() with key before creating a new map.');\n        }\n        // configure maplibre options\n        var style = getStyle(options, mapOptions);\n        var maplibreOptions = Object.assign({}, defaultMaplibreOptions, mapOptions, { style: style });\n        Logger.debug(\"initialize map with options: \".concat(JSON.stringify(maplibreOptions)));\n        // set container\n        maplibreOptions.container = mapOptions.container;\n        // custom request handler for Radar styles\n        maplibreOptions.transformRequest = function (url, resourceType) {\n            if (resourceType === 'Style' && RADAR_STYLES.includes(url)) {\n                var radarStyleURL = createStyleURL(options, url);\n                return { url: radarStyleURL };\n            }\n            else {\n                return { url: url };\n            }\n        };\n        // create map\n        var map = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Map(maplibreOptions);\n        var container = map.getContainer();\n        if (!container.style.width && !container.style.height) {\n            Logger.warn('map container does not have a set \"width\" or \"height\"');\n        }\n        // add radar logo\n        var img = document.createElement('img');\n        img.src = RADAR_LOGO_URL;\n        var link = document.createElement('a');\n        link.id = 'radar-map-logo';\n        link.href = 'https://radar.com?ref=powered_by_radar';\n        link.target = '_blank';\n        link.style.position = 'absolute';\n        link.style.bottom = '0';\n        link.style.left = '5px';\n        link.style.width = '80px';\n        link.style.height = '38px';\n        link.appendChild(img);\n        map.getContainer().appendChild(link);\n        // add attribution\n        var attribution = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.AttributionControl({ compact: false });\n        map.addControl(attribution, 'bottom-right');\n        // add zoom controls\n        var nav = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.NavigationControl({ showCompass: false });\n        map.addControl(nav, 'bottom-right');\n        // handle map resize actions\n        var onResize = function () {\n            var attrib = document.querySelector('.maplibregl-ctrl-attrib');\n            if (attrib) {\n                var width = map.getContainer().clientWidth;\n                if (width < 380) {\n                    attrib.classList.add('hidden');\n                }\n                else {\n                    attrib.classList.remove('hidden');\n                }\n            }\n        };\n        map.on('resize', onResize);\n        map.on('load', onResize);\n        return map;\n    };\n    MapUI.createMarker = function (markerOptions) {\n        if (markerOptions === void 0) { markerOptions = {}; }\n        var maplibreOptions = Object.assign({}, defaultMarkerOptions);\n        if (markerOptions.color) {\n            maplibreOptions.color = markerOptions.color;\n        }\n        if (markerOptions.element) {\n            maplibreOptions.element = markerOptions.element;\n        }\n        if (markerOptions.scale) {\n            maplibreOptions.scale = markerOptions.scale;\n        }\n        var marker = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Marker(maplibreOptions);\n        // set popup text or HTML\n        if (markerOptions.text) {\n            var popup = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Popup({ offset: 35 }).setText(markerOptions.text);\n            marker.setPopup(popup);\n        }\n        else if (markerOptions.html) {\n            var popup = new maplibre_gl__WEBPACK_IMPORTED_MODULE_0__.Popup({ offset: 35 }).setHTML(markerOptions.html);\n            marker.setPopup(popup);\n        }\n        return marker;\n    };\n    return MapUI;\n}());\n\nvar CLASSNAMES = {\n    WRAPPER: 'radar-autocomplete-wrapper',\n    INPUT: 'radar-autocomplete-input',\n    SEARCH_ICON: 'radar-autocomplete-search-icon',\n    RESULTS_LIST: 'radar-autocomplete-results-list',\n    RESULTS_ITEM: 'radar-autocomplete-results-item',\n    RESULTS_MARKER: 'radar-autocomplete-results-marker',\n    SELECTED_ITEM: 'radar-autocomplete-results-item-selected',\n    POWERED_BY_RADAR: 'radar-powered',\n    NO_RESULTS: 'radar-no-results',\n};\nvar ARIA = {\n    EXPANDED: 'aria-expanded',\n};\nvar defaultAutocompleteOptions = {\n    container: 'autocomplete',\n    debounceMS: 200,\n    minCharacters: 3,\n    limit: 8,\n    placeholder: 'Search address',\n    responsive: true,\n    disabled: false,\n    showMarkers: true,\n    hideResultsOnBlur: true,\n};\n// determine whether to use px or CSS string\nvar formatCSSValue = function (value) {\n    if (typeof value === 'number') {\n        return \"\".concat(value, \"px\");\n    }\n    return value;\n};\nvar DEFAULT_WIDTH = 400;\nvar setWidth = function (input, options) {\n    // if responsive and width is provided, treat it as maxWidth\n    if (options.responsive) {\n        input.style.width = '100%';\n        if (options.width) {\n            input.style.maxWidth = formatCSSValue(options.width);\n        }\n        return;\n    }\n    // if not responsive, set fixed width and unset maxWidth\n    input.style.width = formatCSSValue(options.width || DEFAULT_WIDTH);\n    input.style.removeProperty('max-width');\n};\nvar setHeight = function (resultsList, options) {\n    if (options.maxHeight) {\n        resultsList.style.maxHeight = formatCSSValue(options.maxHeight);\n        resultsList.style.overflowY = 'auto'; /* allow overflow when maxHeight is applied */\n    }\n};\nvar getMarkerIcon = function (color) {\n    if (color === void 0) { color = \"#ACBDC8\"; }\n    var fill = color.replace('#', '%23');\n    var svg = \"<svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path d=\\\"M12.5704 6.57036C12.5704 4.11632 10.6342 2.11257 8.21016 2C8.14262 2 8.06757 2 8.00003 2C7.93249 2 7.85744 2 7.7899 2C5.35838 2.11257 3.42967 4.11632 3.42967 6.57036C3.42967 6.60037 3.42967 6.6379 3.42967 6.66792C3.42967 6.69794 3.42967 6.73546 3.42967 6.76548C3.42967 9.46717 7.09196 13.3621 7.4672 13.7598C7.61729 13.9174 7.84994 14 8.00003 14C8.15012 14 8.38277 13.9174 8.53286 13.7598C8.9156 13.3621 12.5704 9.46717 12.5704 6.76548C12.5704 6.72795 12.5704 6.69794 12.5704 6.66792C12.5704 6.6379 12.5704 6.60037 12.5704 6.57036ZM7.99252 8.28893C7.04693 8.28893 6.27395 7.52345 6.27395 6.57036C6.27395 5.61726 7.03943 4.85178 7.99252 4.85178C8.94562 4.85178 9.7111 5.61726 9.7111 6.57036C9.7111 7.52345 8.94562 8.28893 7.99252 8.28893Z\\\" fill=\\\"\".concat(fill, \"\\\"/>\\n  </svg>\").trim();\n    return \"data:image/svg+xml;charset=utf-8,\".concat(svg);\n};\nvar AutocompleteUI = /** @class */ (function () {\n    function AutocompleteUI(options) {\n        if (options === void 0) { options = {}; }\n        this.config = Object.assign({}, defaultAutocompleteOptions, options);\n        // setup state\n        this.isOpen = false;\n        this.debouncedFetchResults = this.debounce(this.fetchResults, this.config.debounceMS);\n        this.results = [];\n        this.highlightedIndex = -1;\n        // set threshold alias\n        if (this.config.threshold !== undefined) {\n            this.config.minCharacters = this.config.threshold;\n            Logger.warn('AutocompleteUI option \"threshold\" is deprecated, use \"minCharacters\" instead.');\n        }\n        if (options.near) {\n            if (typeof options.near === 'string') {\n                this.near = options.near;\n            }\n            else {\n                this.near = \"\".concat(options.near.latitude, \",\").concat(options.near.longitude);\n            }\n        }\n        // get container element\n        var containerEL;\n        if (typeof this.config.container === 'string') { // lookup container element by ID\n            containerEL = document.getElementById(this.config.container);\n        }\n        else { // use provided element\n            containerEL = this.config.container; // HTMLElement\n        }\n        if (!containerEL) {\n            throw new RadarAutocompleteContainerNotFound(\"Could not find container element: \".concat(this.config.container));\n        }\n        this.container = containerEL;\n        // create wrapper for input and result list\n        this.wrapper = document.createElement('div');\n        this.wrapper.classList.add(CLASSNAMES.WRAPPER);\n        this.wrapper.style.display = this.config.responsive ? 'block' : 'inline-block';\n        setWidth(this.wrapper, this.config);\n        // result list element\n        this.resultsList = document.createElement('ul');\n        this.resultsList.classList.add(CLASSNAMES.RESULTS_LIST);\n        setHeight(this.resultsList, this.config);\n        if (containerEL.nodeName === 'INPUT') {\n            // if an <input> element is provided, use that as the inputField,\n            // and append the resultList to it's parent container\n            this.inputField = containerEL;\n            // append to dom\n            this.wrapper.appendChild(this.resultsList);\n            containerEL.parentNode.appendChild(this.wrapper);\n        }\n        else {\n            // if container is not an input, create new input and append to container\n            // create new input\n            this.inputField = document.createElement('input');\n            this.inputField.classList.add(CLASSNAMES.INPUT);\n            this.inputField.placeholder = this.config.placeholder;\n            this.inputField.type = 'text';\n            this.inputField.disabled = this.config.disabled;\n            // search icon\n            var searchIcon = document.createElement('div');\n            searchIcon.classList.add(CLASSNAMES.SEARCH_ICON);\n            // append to DOM\n            this.wrapper.appendChild(this.inputField);\n            this.wrapper.appendChild(this.resultsList);\n            this.wrapper.appendChild(searchIcon);\n            this.container.appendChild(this.wrapper);\n        }\n        // setup event listeners\n        this.inputField.addEventListener('input', this.handleInput.bind(this));\n        this.inputField.addEventListener('keydown', this.handleKeyboardNavigation.bind(this));\n        if (this.config.hideResultsOnBlur) {\n            this.inputField.addEventListener('blur', this.close.bind(this), true);\n        }\n        Logger.debug(\"AutocompleteUI iniailized with options: \".concat(JSON.stringify(this.config)));\n    }\n    // create a new AutocompleteUI instance\n    AutocompleteUI.createAutocomplete = function (autocompleteOptions) {\n        return new AutocompleteUI(autocompleteOptions);\n    };\n    AutocompleteUI.prototype.handleInput = function () {\n        var _this = this;\n        // Fetch autocomplete results and display them\n        var query = this.inputField.value;\n        if (query.length < this.config.minCharacters) {\n            return;\n        }\n        this.debouncedFetchResults(query)\n            .then(function (results) {\n            var onResults = _this.config.onResults;\n            if (onResults) {\n                onResults(results);\n            }\n            _this.displayResults(results);\n        })\n            .catch(function (error) {\n            Logger.warn(\"Autocomplete ui error: \".concat(error.message));\n            var onError = _this.config.onError;\n            if (onError) {\n                onError(error);\n            }\n        });\n    };\n    AutocompleteUI.prototype.debounce = function (fn, delay) {\n        var _this = this;\n        var timeoutId;\n        var resolveFn;\n        var rejectFn;\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(function () {\n                var result = fn.apply(_this, args);\n                if (result instanceof Promise) {\n                    result\n                        .then(function (value) {\n                        if (resolveFn) {\n                            resolveFn(value);\n                        }\n                    })\n                        .catch(function (error) {\n                        if (rejectFn) {\n                            rejectFn(error);\n                        }\n                    });\n                }\n            }, delay);\n            return new Promise(function (resolve, reject) {\n                resolveFn = resolve;\n                rejectFn = reject;\n            });\n        };\n    };\n    AutocompleteUI.prototype.fetchResults = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, limit, layers, countryCode, expandUnits, onRequest, params, addresses;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.config, limit = _a.limit, layers = _a.layers, countryCode = _a.countryCode, expandUnits = _a.expandUnits, onRequest = _a.onRequest;\n                        params = {\n                            query: query,\n                            limit: limit,\n                            layers: layers,\n                            countryCode: countryCode,\n                            expandUnits: expandUnits,\n                        };\n                        if (this.near) {\n                            params.near = this.near;\n                        }\n                        if (onRequest) {\n                            onRequest(params);\n                        }\n                        return [4 /*yield*/, SearchAPI.autocomplete(params)];\n                    case 1:\n                        addresses = (_b.sent()).addresses;\n                        return [2 /*return*/, addresses];\n                }\n            });\n        });\n    };\n    AutocompleteUI.prototype.displayResults = function (results) {\n        var _this = this;\n        // Clear the previous results\n        this.clearResultsList();\n        this.results = results;\n        var marker;\n        if (this.config.showMarkers) {\n            marker = document.createElement('img');\n            marker.classList.add(CLASSNAMES.RESULTS_MARKER);\n            marker.setAttribute('src', getMarkerIcon(this.config.markerColor));\n        }\n        // Create and append list items for each result\n        results.forEach(function (result, index) {\n            var li = document.createElement('li');\n            li.classList.add(CLASSNAMES.RESULTS_ITEM);\n            // construct result with bolded label\n            var listContent;\n            if (result.formattedAddress.includes(result.addressLabel) && result.layer !== 'postalCode') {\n                // if addressLabel is contained in the formatted address, bold the address label\n                var regex = new RegExp(\"(\".concat(result.addressLabel, \"),?\"));\n                listContent = result.formattedAddress.replace(regex, '<b>$1</b>');\n            }\n            else {\n                // otherwise append the address or place label to formatted address\n                var label = result.placeLabel || result.addressLabel;\n                listContent = \"<b>\".concat(label, \"</b> \").concat(result.formattedAddress);\n            }\n            li.innerHTML = listContent;\n            // prepend marker if enabled\n            if (marker) {\n                li.prepend(marker.cloneNode());\n            }\n            // add click handler to each result, use mousedown to fire before blur event\n            li.addEventListener('mousedown', function () {\n                _this.select(index);\n            });\n            _this.resultsList.appendChild(li);\n        });\n        this.open();\n        if (results.length > 0) {\n            var link = document.createElement('a');\n            link.href = 'https://radar.com?ref=powered_by_radar';\n            link.target = '_blank';\n            this.poweredByLink = link;\n            var poweredByText = document.createElement('span');\n            poweredByText.textContent = 'Powered by';\n            link.appendChild(poweredByText);\n            var radarLogo = document.createElement('span');\n            radarLogo.id = 'radar-powered-logo';\n            link.appendChild(radarLogo);\n            var poweredByContainer = document.createElement('div');\n            poweredByContainer.classList.add(CLASSNAMES.POWERED_BY_RADAR);\n            poweredByContainer.appendChild(link);\n            this.resultsList.appendChild(poweredByContainer);\n        }\n        else {\n            var noResultsText = document.createElement('div');\n            noResultsText.classList.add(CLASSNAMES.NO_RESULTS);\n            noResultsText.textContent = 'No results';\n            this.resultsList.appendChild(noResultsText);\n        }\n    };\n    AutocompleteUI.prototype.open = function () {\n        if (this.isOpen) {\n            return;\n        }\n        this.wrapper.setAttribute(ARIA.EXPANDED, 'true');\n        this.resultsList.removeAttribute('hidden');\n        this.isOpen = true;\n    };\n    AutocompleteUI.prototype.close = function (e) {\n        var _this = this;\n        if (!this.isOpen) {\n            return;\n        }\n        // run this code async to allow link click to propagate before blur\n        // (add 100ms delay if closed from link click)\n        var linkClick = e && (e.relatedTarget === this.poweredByLink);\n        setTimeout(function () {\n            _this.wrapper.removeAttribute(ARIA.EXPANDED);\n            _this.resultsList.setAttribute('hidden', '');\n            _this.highlightedIndex = -1;\n            _this.isOpen = false;\n            _this.clearResultsList();\n        }, linkClick ? 100 : 0);\n    };\n    AutocompleteUI.prototype.goTo = function (index) {\n        if (!this.isOpen || !this.results.length) {\n            return;\n        }\n        // wrap around\n        if (index < 0) {\n            index = this.results.length - 1;\n        }\n        else if (index >= this.results.length) {\n            index = 0;\n        }\n        var resultItems = this.resultsList.getElementsByTagName('li');\n        if (this.highlightedIndex > -1) {\n            // clear class names on previously highlighted item\n            resultItems[this.highlightedIndex].classList.remove(CLASSNAMES.SELECTED_ITEM);\n        }\n        // add class name to newly highlighted item\n        resultItems[index].classList.add(CLASSNAMES.SELECTED_ITEM);\n        this.highlightedIndex = index;\n    };\n    AutocompleteUI.prototype.handleKeyboardNavigation = function (event) {\n        // fallback to deprecated \"keyCode\" if event.code not set\n        var code = event.code !== undefined ? event.code : event.keyCode;\n        // allow event to propagate if result list is not open\n        if (!this.isOpen) {\n            return;\n        }\n        switch (code) {\n            // Next item\n            case 'Tab':\n            case 'ArrowDown':\n            case 40:\n                event.preventDefault();\n                this.goTo(this.highlightedIndex + 1);\n                break;\n            // Prev item\n            case 'ArrowUp':\n            case 38:\n                event.preventDefault();\n                this.goTo(this.highlightedIndex - 1);\n                break;\n            // Select\n            case 'Enter':\n            case 13:\n                this.select(this.highlightedIndex);\n                break;\n            // Close\n            case 'Esc':\n            case 27:\n                this.close();\n                break;\n        }\n    };\n    AutocompleteUI.prototype.select = function (index) {\n        var result = this.results[index];\n        if (!result) {\n            Logger.warn(\"No autocomplete result found at index: \".concat(index));\n            return;\n        }\n        var inputValue;\n        if (result.formattedAddress.includes(result.addressLabel)) {\n            inputValue = result.formattedAddress;\n        }\n        else {\n            var label = result.placeLabel || result.addressLabel;\n            inputValue = \"\".concat(label, \", \").concat(result.formattedAddress);\n        }\n        this.inputField.value = inputValue;\n        var onSelection = this.config.onSelection;\n        if (onSelection) {\n            onSelection(result);\n        }\n        // clear results list\n        this.close();\n    };\n    AutocompleteUI.prototype.clearResultsList = function () {\n        this.resultsList.innerHTML = '';\n        this.results = [];\n    };\n    // remove elements from DOM\n    AutocompleteUI.prototype.remove = function () {\n        Logger.debug('AutocompleteUI removed.');\n        this.inputField.remove();\n        this.resultsList.remove();\n        this.wrapper.remove();\n    };\n    AutocompleteUI.prototype.setNear = function (near) {\n        if (near === undefined || near === null) {\n            this.near = undefined;\n        }\n        else if (typeof near === 'string') {\n            this.near = near;\n        }\n        else {\n            this.near = \"\".concat(near.latitude, \",\").concat(near.longitude);\n        }\n        return this;\n    };\n    AutocompleteUI.prototype.setPlaceholder = function (placeholder) {\n        this.config.placeholder = placeholder;\n        this.inputField.placeholder = placeholder;\n        return this;\n    };\n    AutocompleteUI.prototype.setDisabled = function (disabled) {\n        this.config.disabled = disabled;\n        this.inputField.disabled = disabled;\n        return this;\n    };\n    AutocompleteUI.prototype.setResponsive = function (responsive) {\n        this.config.responsive = responsive;\n        setWidth(this.wrapper, this.config);\n        return this;\n    };\n    AutocompleteUI.prototype.setWidth = function (width) {\n        this.config.width = width;\n        setWidth(this.wrapper, this.config);\n        return this;\n    };\n    AutocompleteUI.prototype.setMaxHeight = function (height) {\n        this.config.maxHeight = height;\n        setHeight(this.resultsList, this.config);\n        return this;\n    };\n    AutocompleteUI.prototype.setMinCharacters = function (minCharacters) {\n        this.config.minCharacters = minCharacters;\n        this.config.threshold = minCharacters;\n        return this;\n    };\n    AutocompleteUI.prototype.setLimit = function (limit) {\n        this.config.limit = limit;\n        return this;\n    };\n    AutocompleteUI.prototype.setShowMarkers = function (showMarkers) {\n        this.config.showMarkers = showMarkers;\n        if (showMarkers) {\n            var marker = document.createElement('img');\n            marker.classList.add(CLASSNAMES.RESULTS_MARKER);\n            marker.setAttribute('src', getMarkerIcon(this.config.markerColor));\n            var resultItems = this.resultsList.getElementsByTagName('li');\n            for (var i = 0; i < resultItems.length; i++) {\n                var currentMarker = resultItems[i].getElementsByClassName(CLASSNAMES.RESULTS_MARKER)[0];\n                if (!currentMarker) {\n                    resultItems[i].prepend(marker.cloneNode());\n                }\n            }\n        }\n        else {\n            var resultItems = this.resultsList.getElementsByTagName('li');\n            for (var i = 0; i < resultItems.length; i++) {\n                var marker = resultItems[i].getElementsByClassName(CLASSNAMES.RESULTS_MARKER)[0];\n                if (marker) {\n                    marker.remove();\n                }\n            }\n        }\n        return this;\n    };\n    AutocompleteUI.prototype.setMarkerColor = function (color) {\n        this.config.markerColor = color;\n        var marker = this.resultsList.getElementsByClassName(CLASSNAMES.RESULTS_MARKER);\n        for (var i = 0; i < marker.length; i++) {\n            marker[i].setAttribute('src', getMarkerIcon(color));\n        }\n        return this;\n    };\n    AutocompleteUI.prototype.setHideResultsOnBlur = function (hideResultsOnBlur) {\n        this.config.hideResultsOnBlur = hideResultsOnBlur;\n        if (hideResultsOnBlur) {\n            this.inputField.addEventListener('blur', this.close.bind(this), true);\n        }\n        else {\n            this.inputField.removeEventListener('blur', this.close.bind(this), true);\n        }\n        return this;\n    };\n    return AutocompleteUI;\n}());\n\nvar isSecretKey = function (key) { return (key.includes('_sk_')); };\nvar isLiveKey = function (key) { return (key.includes('_live_')); };\nvar Radar = /** @class */ (function () {\n    function Radar() {\n    }\n    Object.defineProperty(Radar, \"VERSION\", {\n        get: function () {\n            return SDK_VERSION;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Radar, \"ui\", {\n        // \"ui\" namespace\n        get: function () {\n            return {\n                maplibregl: MapUI.getMapLibre(),\n                map: MapUI.createMap,\n                marker: MapUI.createMarker,\n                autocomplete: AutocompleteUI.createAutocomplete,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Radar.initialize = function (publishableKey, options) {\n        if (options === void 0) { options = {}; }\n        if (!publishableKey) {\n            throw new RadarPublishableKeyError('Publishable key required in initialization.');\n        }\n        if (isSecretKey(publishableKey)) {\n            throw new RadarPublishableKeyError('Secret keys are not allowed. Please use your Radar publishable key.');\n        }\n        // store settings in global config\n        var live = isLiveKey(publishableKey);\n        var logLevel = live ? 'error' : 'info';\n        var debug = !live;\n        var radarOptions = Object.assign(Config.defaultOptions, {\n            publishableKey: publishableKey,\n            live: live,\n            logLevel: logLevel,\n            debug: debug,\n        }, options);\n        Config.setup(radarOptions);\n        Logger.info(\"initialized with \".concat(live ? 'live' : 'test', \" publishableKey.\"));\n        if (options.debug) {\n            Logger.info(\"using options: \".concat(JSON.stringify(options)));\n        }\n        // NOTE(jasonl): this allows us to run jest tests\n        // without having to mock the ConfigAPI.getConfig call\n        if (!(window === null || window === void 0 ? void 0 : window.RADAR_TEST_ENV)) {\n            ConfigAPI.getConfig();\n        }\n    };\n    Radar.clear = function () {\n        Config.clear();\n    };\n    ///////////////////////\n    // geofencing platform\n    ///////////////////////\n    Radar.setUserId = function (userId) {\n        if (!userId) {\n            Storage.removeItem(Storage.USER_ID);\n            return;\n        }\n        Storage.setItem(Storage.USER_ID, String(userId).trim());\n    };\n    Radar.setDescription = function (description) {\n        if (!description) {\n            Storage.removeItem(Storage.DESCRIPTION);\n            return;\n        }\n        Storage.setItem(Storage.DESCRIPTION, String(description).trim());\n    };\n    Radar.setMetadata = function (metadata) {\n        if (!metadata) {\n            Storage.removeItem(Storage.METADATA);\n            return;\n        }\n        Storage.setItem(Storage.METADATA, JSON.stringify(metadata));\n    };\n    Radar.getLocation = function () {\n        return Navigator.getCurrentPosition();\n    };\n    Radar.trackOnce = function (params) {\n        if (params === void 0) { params = {}; }\n        try {\n            return TrackAPI.trackOnce(params);\n        }\n        finally {\n            ConfigAPI.getConfig(params); // call with updated permissions\n        }\n    };\n    Radar.trackVerified = function (params) {\n        if (params === void 0) { params = {}; }\n        return VerifyAPI.trackVerified(params);\n    };\n    Radar.trackVerifiedToken = function (params) {\n        if (params === void 0) { params = {}; }\n        return VerifyAPI.trackVerified(params, true);\n    };\n    Radar.getContext = function (params) {\n        return ContextAPI.getContext(params);\n    };\n    Radar.setTripOptions = function (tripOptions) {\n        TripsAPI.setTripOptions(tripOptions);\n    };\n    Radar.clearTripOptions = function () {\n        TripsAPI.clearTripOptions();\n    };\n    Radar.getTripOptions = function () {\n        return TripsAPI.getTripOptions();\n    };\n    Radar.startTrip = function (tripOptions) {\n        return TripsAPI.startTrip(tripOptions);\n    };\n    Radar.updateTrip = function (tripOptions) {\n        return TripsAPI.updateTrip(tripOptions);\n    };\n    Radar.completeTrip = function () {\n        return TripsAPI.completeTrip();\n    };\n    Radar.cancelTrip = function () {\n        return TripsAPI.cancelTrip();\n    };\n    Radar.logConversion = function (params) {\n        return ConversionsAPI.logConversion(params);\n    };\n    /////////////////\n    // maps platform\n    /////////////////\n    Radar.forwardGeocode = function (params) {\n        return Geocoding.forwardGeocode(params);\n    };\n    Radar.reverseGeocode = function (params) {\n        return Geocoding.reverseGeocode(params);\n    };\n    Radar.ipGeocode = function () {\n        return Geocoding.ipGeocode();\n    };\n    Radar.autocomplete = function (params) {\n        return SearchAPI.autocomplete(params);\n    };\n    Radar.searchGeofences = function (params) {\n        return SearchAPI.searchGeofences(params);\n    };\n    Radar.searchPlaces = function (params) {\n        return SearchAPI.searchPlaces(params);\n    };\n    Radar.validateAddress = function (params) {\n        return AddressesAPI.validateAddress(params);\n    };\n    Radar.distance = function (params) {\n        return RoutingAPI.distance(params);\n    };\n    Radar.matrix = function (params) {\n        return RoutingAPI.matrix(params);\n    };\n    return Radar;\n}());\n\n\n//# sourceMappingURL=radar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/radar-sdk-js@4.1.11_maplibre-gl@3.5.1/node_modules/radar-sdk-js/dist/radar.js\n");

/***/ })

};
;