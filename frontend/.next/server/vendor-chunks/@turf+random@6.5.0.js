"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+random@6.5.0";
exports.ids = ["vendor-chunks/@turf+random@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+random@6.5.0/node_modules/@turf/random/dist/es/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+random@6.5.0/node_modules/@turf/random/dist/es/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomLineString: () => (/* binding */ randomLineString),\n/* harmony export */   randomPoint: () => (/* binding */ randomPoint),\n/* harmony export */   randomPolygon: () => (/* binding */ randomPolygon),\n/* harmony export */   randomPosition: () => (/* binding */ randomPosition)\n/* harmony export */ });\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\nfunction randomPosition(bbox) {\n    if (Array.isArray(bbox)) {\n        return coordInBBox(bbox);\n    }\n    if (bbox && bbox.bbox) {\n        return coordInBBox(bbox.bbox);\n    }\n    return [lon(), lat()];\n}\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\nfunction randomPoint(count, options) {\n    if (options === void 0) { options = {}; }\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        features.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.point)(randomPosition(options.bbox)));\n    }\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.featureCollection)(features);\n}\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\nfunction randomPolygon(count, options) {\n    if (options === void 0) { options = {}; }\n    // Default param\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(options.num_vertices) || options.num_vertices === undefined) {\n        options.num_vertices = 10;\n    }\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(options.max_radial_length) ||\n        options.max_radial_length === undefined) {\n        options.max_radial_length = 10;\n    }\n    var features = [];\n    var _loop_1 = function (i) {\n        var vertices = [];\n        var circleOffsets = __spreadArrays(Array(options.num_vertices + 1)).map(Math.random);\n        // Sum Offsets\n        circleOffsets.forEach(function (cur, index, arr) {\n            arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n        });\n        // scaleOffsets\n        circleOffsets.forEach(function (cur) {\n            cur = (cur * 2 * Math.PI) / circleOffsets[circleOffsets.length - 1];\n            var radialScaler = Math.random();\n            vertices.push([\n                radialScaler * (options.max_radial_length || 10) * Math.sin(cur),\n                radialScaler * (options.max_radial_length || 10) * Math.cos(cur),\n            ]);\n        });\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));\n        features.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.polygon)([vertices]));\n    };\n    for (var i = 0; i < count; i++) {\n        _loop_1(i);\n    }\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.featureCollection)(features);\n}\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\nfunction randomLineString(count, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isObject)(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_length = options.max_length;\n    var max_rotation = options.max_rotation;\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    // Default parameters\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(num_vertices) ||\n        num_vertices === undefined ||\n        num_vertices < 2) {\n        num_vertices = 10;\n    }\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(max_length) || max_length === undefined) {\n        max_length = 0.0001;\n    }\n    if (!(0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(max_rotation) || max_rotation === undefined) {\n        max_rotation = Math.PI / 8;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var startingPoint = randomPosition(bbox);\n        var vertices = [startingPoint];\n        for (var j = 0; j < num_vertices - 1; j++) {\n            var priorAngle = j === 0\n                ? Math.random() * 2 * Math.PI\n                : Math.tan((vertices[j][1] - vertices[j - 1][1]) /\n                    (vertices[j][0] - vertices[j - 1][0]));\n            var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n            var distance = Math.random() * max_length;\n            vertices.push([\n                vertices[j][0] + distance * Math.cos(angle),\n                vertices[j][1] + distance * Math.sin(angle),\n            ]);\n        }\n        features.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.lineString)(vertices));\n    }\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.featureCollection)(features);\n}\nfunction vertexToCoordinate(hub) {\n    return function (cur) {\n        return [cur[0] + hub[0], cur[1] + hub[1]];\n    };\n}\nfunction rnd() {\n    return Math.random() - 0.5;\n}\nfunction lon() {\n    return rnd() * 360;\n}\nfunction lat() {\n    return rnd() * 180;\n}\nfunction coordInBBox(bbox) {\n    return [\n        Math.random() * (bbox[2] - bbox[0]) + bbox[0],\n        Math.random() * (bbox[3] - bbox[1]) + bbox[1],\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+random@6.5.0/node_modules/@turf/random/dist/es/index.js\n");

/***/ })

};
;