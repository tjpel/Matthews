"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+hex-grid@6.5.0";
exports.ids = ["vendor-chunks/@turf+hex-grid@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+hex-grid@6.5.0/node_modules/@turf/hex-grid/dist/es/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+hex-grid@6.5.0/node_modules/@turf/hex-grid/dist/es/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _turf_distance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/distance */ \"(ssr)/./node_modules/.pnpm/@turf+distance@6.5.0/node_modules/@turf/distance/dist/es/index.js\");\n/* harmony import */ var _turf_intersect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/intersect */ \"(ssr)/./node_modules/.pnpm/@turf+intersect@6.5.0/node_modules/@turf/intersect/dist/es/index.js\");\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n\n\n\n/**\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\n * radius of the circumcircle of the hexagons.\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [hexgrid];\n */\nfunction hexGrid(bbox, cellSide, options) {\n    if (options === void 0) { options = {}; }\n    // Issue => https://github.com/Turfjs/turf/issues/1284\n    var clonedProperties = JSON.stringify(options.properties || {});\n    var west = bbox[0], south = bbox[1], east = bbox[2], north = bbox[3];\n    var centerY = (south + north) / 2;\n    var centerX = (west + east) / 2;\n    // https://github.com/Turfjs/turf/issues/758\n    var xFraction = (cellSide * 2) / (0,_turf_distance__WEBPACK_IMPORTED_MODULE_0__[\"default\"])([west, centerY], [east, centerY], options);\n    var cellWidth = xFraction * (east - west);\n    var yFraction = (cellSide * 2) / (0,_turf_distance__WEBPACK_IMPORTED_MODULE_0__[\"default\"])([centerX, south], [centerX, north], options);\n    var cellHeight = yFraction * (north - south);\n    var radius = cellWidth / 2;\n    var hex_width = radius * 2;\n    var hex_height = (Math.sqrt(3) / 2) * cellHeight;\n    var box_width = east - west;\n    var box_height = north - south;\n    var x_interval = (3 / 4) * hex_width;\n    var y_interval = hex_height;\n    // adjust box_width so all hexagons will be inside the bbox\n    var x_span = (box_width - hex_width) / (hex_width - radius / 2);\n    var x_count = Math.floor(x_span);\n    var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 -\n        radius / 2 +\n        x_interval / 2;\n    // adjust box_height so all hexagons will be inside the bbox\n    var y_count = Math.floor((box_height - hex_height) / hex_height);\n    var y_adjust = (box_height - y_count * hex_height) / 2;\n    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n    if (hasOffsetY) {\n        y_adjust -= hex_height / 4;\n    }\n    // Precompute cosines and sines of angles used in hexagon creation for performance gain\n    var cosines = [];\n    var sines = [];\n    for (var i = 0; i < 6; i++) {\n        var angle = ((2 * Math.PI) / 6) * i;\n        cosines.push(Math.cos(angle));\n        sines.push(Math.sin(angle));\n    }\n    var results = [];\n    for (var x = 0; x <= x_count; x++) {\n        for (var y = 0; y <= y_count; y++) {\n            var isOdd = x % 2 === 1;\n            if (y === 0 && isOdd)\n                continue;\n            if (y === 0 && hasOffsetY)\n                continue;\n            var center_x = x * x_interval + west - x_adjust;\n            var center_y = y * y_interval + south + y_adjust;\n            if (isOdd) {\n                center_y -= hex_height / 2;\n            }\n            if (options.triangles === true) {\n                hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {\n                    if (options.mask) {\n                        if ((0,_turf_intersect__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(options.mask, triangle))\n                            results.push(triangle);\n                    }\n                    else {\n                        results.push(triangle);\n                    }\n                });\n            }\n            else {\n                var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);\n                if (options.mask) {\n                    if ((0,_turf_intersect__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(options.mask, hex))\n                        results.push(hex);\n                }\n                else {\n                    results.push(hex);\n                }\n            }\n        }\n    }\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_2__.featureCollection)(results);\n}\n/**\n * Creates hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half hexagon width\n * @param {number} ry half hexagon height\n * @param {Object} properties passed to each hexagon\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Feature<Polygon>} hexagon\n */\nfunction hexagon(center, rx, ry, properties, cosines, sines) {\n    var vertices = [];\n    for (var i = 0; i < 6; i++) {\n        var x = center[0] + rx * cosines[i];\n        var y = center[1] + ry * sines[i];\n        vertices.push([x, y]);\n    }\n    //first and last vertex must be the same\n    vertices.push(vertices[0].slice());\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_2__.polygon)([vertices], properties);\n}\n/**\n * Creates triangles composing an hexagon\n *\n * @private\n * @param {Array<number>} center of the hexagon\n * @param {number} rx half triangle width\n * @param {number} ry half triangle height\n * @param {Object} properties passed to each triangle\n * @param {Array<number>} cosines precomputed\n * @param {Array<number>} sines precomputed\n * @returns {Array<Feature<Polygon>>} triangles\n */\nfunction hexTriangles(center, rx, ry, properties, cosines, sines) {\n    var triangles = [];\n    for (var i = 0; i < 6; i++) {\n        var vertices = [];\n        vertices.push(center);\n        vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\n        vertices.push([\n            center[0] + rx * cosines[(i + 1) % 6],\n            center[1] + ry * sines[(i + 1) % 6],\n        ]);\n        vertices.push(center);\n        triangles.push((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_2__.polygon)([vertices], properties));\n    }\n    return triangles;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hexGrid);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+hex-grid@6.5.0/node_modules/@turf/hex-grid/dist/es/index.js\n");

/***/ })

};
;