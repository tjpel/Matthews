/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/splaytree@3.1.2";
exports.ids = ["vendor-chunks/splaytree@3.1.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/splaytree@3.1.2/node_modules/splaytree/dist/splay.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/splaytree@3.1.2/node_modules/splaytree/dist/splay.js ***!
  \*********************************************************************************/
/***/ (function(module) {

eval("/**\n * splaytree v3.1.2\n * Fast Splay tree for Node and browser\n *\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n * @preserve\n */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n}(this, (function () { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\n\n    var Node = /** @class */ (function () {\r\n        function Node(key, data) {\r\n            this.next = null;\r\n            this.key = key;\r\n            this.data = data;\r\n            this.left = null;\r\n            this.right = null;\r\n        }\r\n        return Node;\r\n    }());\n\n    /* follows \"An implementation of top-down splaying\"\r\n     * by D. Sleator <sleator@cs.cmu.edu> March 1992\r\n     */\r\n    function DEFAULT_COMPARE(a, b) {\r\n        return a > b ? 1 : a < b ? -1 : 0;\r\n    }\r\n    /**\r\n     * Simple top down splay, not requiring i to be in the tree t.\r\n     */\r\n    function splay(i, t, comparator) {\r\n        var N = new Node(null, null);\r\n        var l = N;\r\n        var r = N;\r\n        while (true) {\r\n            var cmp = comparator(i, t.key);\r\n            //if (i < t.key) {\r\n            if (cmp < 0) {\r\n                if (t.left === null)\r\n                    break;\r\n                //if (i < t.left.key) {\r\n                if (comparator(i, t.left.key) < 0) {\r\n                    var y = t.left; /* rotate right */\r\n                    t.left = y.right;\r\n                    y.right = t;\r\n                    t = y;\r\n                    if (t.left === null)\r\n                        break;\r\n                }\r\n                r.left = t; /* link right */\r\n                r = t;\r\n                t = t.left;\r\n                //} else if (i > t.key) {\r\n            }\r\n            else if (cmp > 0) {\r\n                if (t.right === null)\r\n                    break;\r\n                //if (i > t.right.key) {\r\n                if (comparator(i, t.right.key) > 0) {\r\n                    var y = t.right; /* rotate left */\r\n                    t.right = y.left;\r\n                    y.left = t;\r\n                    t = y;\r\n                    if (t.right === null)\r\n                        break;\r\n                }\r\n                l.right = t; /* link left */\r\n                l = t;\r\n                t = t.right;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        /* assemble */\r\n        l.right = t.left;\r\n        r.left = t.right;\r\n        t.left = N.right;\r\n        t.right = N.left;\r\n        return t;\r\n    }\r\n    function insert(i, data, t, comparator) {\r\n        var node = new Node(i, data);\r\n        if (t === null) {\r\n            node.left = node.right = null;\r\n            return node;\r\n        }\r\n        t = splay(i, t, comparator);\r\n        var cmp = comparator(i, t.key);\r\n        if (cmp < 0) {\r\n            node.left = t.left;\r\n            node.right = t;\r\n            t.left = null;\r\n        }\r\n        else if (cmp >= 0) {\r\n            node.right = t.right;\r\n            node.left = t;\r\n            t.right = null;\r\n        }\r\n        return node;\r\n    }\r\n    function split(key, v, comparator) {\r\n        var left = null;\r\n        var right = null;\r\n        if (v) {\r\n            v = splay(key, v, comparator);\r\n            var cmp = comparator(v.key, key);\r\n            if (cmp === 0) {\r\n                left = v.left;\r\n                right = v.right;\r\n            }\r\n            else if (cmp < 0) {\r\n                right = v.right;\r\n                v.right = null;\r\n                left = v;\r\n            }\r\n            else {\r\n                left = v.left;\r\n                v.left = null;\r\n                right = v;\r\n            }\r\n        }\r\n        return { left: left, right: right };\r\n    }\r\n    function merge(left, right, comparator) {\r\n        if (right === null)\r\n            return left;\r\n        if (left === null)\r\n            return right;\r\n        right = splay(left.key, right, comparator);\r\n        right.left = left;\r\n        return right;\r\n    }\r\n    /**\r\n     * Prints level of the tree\r\n     */\r\n    function printRow(root, prefix, isTail, out, printNode) {\r\n        if (root) {\r\n            out(\"\" + prefix + (isTail ? '└── ' : '├── ') + printNode(root) + \"\\n\");\r\n            var indent = prefix + (isTail ? '    ' : '│   ');\r\n            if (root.left)\r\n                printRow(root.left, indent, false, out, printNode);\r\n            if (root.right)\r\n                printRow(root.right, indent, true, out, printNode);\r\n        }\r\n    }\r\n    var Tree = /** @class */ (function () {\r\n        function Tree(comparator) {\r\n            if (comparator === void 0) { comparator = DEFAULT_COMPARE; }\r\n            this._root = null;\r\n            this._size = 0;\r\n            this._comparator = comparator;\r\n        }\r\n        /**\r\n         * Inserts a key, allows duplicates\r\n         */\r\n        Tree.prototype.insert = function (key, data) {\r\n            this._size++;\r\n            return this._root = insert(key, data, this._root, this._comparator);\r\n        };\r\n        /**\r\n         * Adds a key, if it is not present in the tree\r\n         */\r\n        Tree.prototype.add = function (key, data) {\r\n            var node = new Node(key, data);\r\n            if (this._root === null) {\r\n                node.left = node.right = null;\r\n                this._size++;\r\n                this._root = node;\r\n            }\r\n            var comparator = this._comparator;\r\n            var t = splay(key, this._root, comparator);\r\n            var cmp = comparator(key, t.key);\r\n            if (cmp === 0)\r\n                this._root = t;\r\n            else {\r\n                if (cmp < 0) {\r\n                    node.left = t.left;\r\n                    node.right = t;\r\n                    t.left = null;\r\n                }\r\n                else if (cmp > 0) {\r\n                    node.right = t.right;\r\n                    node.left = t;\r\n                    t.right = null;\r\n                }\r\n                this._size++;\r\n                this._root = node;\r\n            }\r\n            return this._root;\r\n        };\r\n        /**\r\n         * @param  {Key} key\r\n         * @return {Node|null}\r\n         */\r\n        Tree.prototype.remove = function (key) {\r\n            this._root = this._remove(key, this._root, this._comparator);\r\n        };\r\n        /**\r\n         * Deletes i from the tree if it's there\r\n         */\r\n        Tree.prototype._remove = function (i, t, comparator) {\r\n            var x;\r\n            if (t === null)\r\n                return null;\r\n            t = splay(i, t, comparator);\r\n            var cmp = comparator(i, t.key);\r\n            if (cmp === 0) { /* found it */\r\n                if (t.left === null) {\r\n                    x = t.right;\r\n                }\r\n                else {\r\n                    x = splay(i, t.left, comparator);\r\n                    x.right = t.right;\r\n                }\r\n                this._size--;\r\n                return x;\r\n            }\r\n            return t; /* It wasn't there */\r\n        };\r\n        /**\r\n         * Removes and returns the node with smallest key\r\n         */\r\n        Tree.prototype.pop = function () {\r\n            var node = this._root;\r\n            if (node) {\r\n                while (node.left)\r\n                    node = node.left;\r\n                this._root = splay(node.key, this._root, this._comparator);\r\n                this._root = this._remove(node.key, this._root, this._comparator);\r\n                return { key: node.key, data: node.data };\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Find without splaying\r\n         */\r\n        Tree.prototype.findStatic = function (key) {\r\n            var current = this._root;\r\n            var compare = this._comparator;\r\n            while (current) {\r\n                var cmp = compare(key, current.key);\r\n                if (cmp === 0)\r\n                    return current;\r\n                else if (cmp < 0)\r\n                    current = current.left;\r\n                else\r\n                    current = current.right;\r\n            }\r\n            return null;\r\n        };\r\n        Tree.prototype.find = function (key) {\r\n            if (this._root) {\r\n                this._root = splay(key, this._root, this._comparator);\r\n                if (this._comparator(key, this._root.key) !== 0)\r\n                    return null;\r\n            }\r\n            return this._root;\r\n        };\r\n        Tree.prototype.contains = function (key) {\r\n            var current = this._root;\r\n            var compare = this._comparator;\r\n            while (current) {\r\n                var cmp = compare(key, current.key);\r\n                if (cmp === 0)\r\n                    return true;\r\n                else if (cmp < 0)\r\n                    current = current.left;\r\n                else\r\n                    current = current.right;\r\n            }\r\n            return false;\r\n        };\r\n        Tree.prototype.forEach = function (visitor, ctx) {\r\n            var current = this._root;\r\n            var Q = []; /* Initialize stack s */\r\n            var done = false;\r\n            while (!done) {\r\n                if (current !== null) {\r\n                    Q.push(current);\r\n                    current = current.left;\r\n                }\r\n                else {\r\n                    if (Q.length !== 0) {\r\n                        current = Q.pop();\r\n                        visitor.call(ctx, current);\r\n                        current = current.right;\r\n                    }\r\n                    else\r\n                        done = true;\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Walk key range from `low` to `high`. Stops if `fn` returns a value.\r\n         */\r\n        Tree.prototype.range = function (low, high, fn, ctx) {\r\n            var Q = [];\r\n            var compare = this._comparator;\r\n            var node = this._root;\r\n            var cmp;\r\n            while (Q.length !== 0 || node) {\r\n                if (node) {\r\n                    Q.push(node);\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = Q.pop();\r\n                    cmp = compare(node.key, high);\r\n                    if (cmp > 0) {\r\n                        break;\r\n                    }\r\n                    else if (compare(node.key, low) >= 0) {\r\n                        if (fn.call(ctx, node))\r\n                            return this; // stop if smth is returned\r\n                    }\r\n                    node = node.right;\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Returns array of keys\r\n         */\r\n        Tree.prototype.keys = function () {\r\n            var keys = [];\r\n            this.forEach(function (_a) {\r\n                var key = _a.key;\r\n                return keys.push(key);\r\n            });\r\n            return keys;\r\n        };\r\n        /**\r\n         * Returns array of all the data in the nodes\r\n         */\r\n        Tree.prototype.values = function () {\r\n            var values = [];\r\n            this.forEach(function (_a) {\r\n                var data = _a.data;\r\n                return values.push(data);\r\n            });\r\n            return values;\r\n        };\r\n        Tree.prototype.min = function () {\r\n            if (this._root)\r\n                return this.minNode(this._root).key;\r\n            return null;\r\n        };\r\n        Tree.prototype.max = function () {\r\n            if (this._root)\r\n                return this.maxNode(this._root).key;\r\n            return null;\r\n        };\r\n        Tree.prototype.minNode = function (t) {\r\n            if (t === void 0) { t = this._root; }\r\n            if (t)\r\n                while (t.left)\r\n                    t = t.left;\r\n            return t;\r\n        };\r\n        Tree.prototype.maxNode = function (t) {\r\n            if (t === void 0) { t = this._root; }\r\n            if (t)\r\n                while (t.right)\r\n                    t = t.right;\r\n            return t;\r\n        };\r\n        /**\r\n         * Returns node at given index\r\n         */\r\n        Tree.prototype.at = function (index) {\r\n            var current = this._root;\r\n            var done = false;\r\n            var i = 0;\r\n            var Q = [];\r\n            while (!done) {\r\n                if (current) {\r\n                    Q.push(current);\r\n                    current = current.left;\r\n                }\r\n                else {\r\n                    if (Q.length > 0) {\r\n                        current = Q.pop();\r\n                        if (i === index)\r\n                            return current;\r\n                        i++;\r\n                        current = current.right;\r\n                    }\r\n                    else\r\n                        done = true;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        Tree.prototype.next = function (d) {\r\n            var root = this._root;\r\n            var successor = null;\r\n            if (d.right) {\r\n                successor = d.right;\r\n                while (successor.left)\r\n                    successor = successor.left;\r\n                return successor;\r\n            }\r\n            var comparator = this._comparator;\r\n            while (root) {\r\n                var cmp = comparator(d.key, root.key);\r\n                if (cmp === 0)\r\n                    break;\r\n                else if (cmp < 0) {\r\n                    successor = root;\r\n                    root = root.left;\r\n                }\r\n                else\r\n                    root = root.right;\r\n            }\r\n            return successor;\r\n        };\r\n        Tree.prototype.prev = function (d) {\r\n            var root = this._root;\r\n            var predecessor = null;\r\n            if (d.left !== null) {\r\n                predecessor = d.left;\r\n                while (predecessor.right)\r\n                    predecessor = predecessor.right;\r\n                return predecessor;\r\n            }\r\n            var comparator = this._comparator;\r\n            while (root) {\r\n                var cmp = comparator(d.key, root.key);\r\n                if (cmp === 0)\r\n                    break;\r\n                else if (cmp < 0)\r\n                    root = root.left;\r\n                else {\r\n                    predecessor = root;\r\n                    root = root.right;\r\n                }\r\n            }\r\n            return predecessor;\r\n        };\r\n        Tree.prototype.clear = function () {\r\n            this._root = null;\r\n            this._size = 0;\r\n            return this;\r\n        };\r\n        Tree.prototype.toList = function () {\r\n            return toList(this._root);\r\n        };\r\n        /**\r\n         * Bulk-load items. Both array have to be same size\r\n         */\r\n        Tree.prototype.load = function (keys, values, presort) {\r\n            if (values === void 0) { values = []; }\r\n            if (presort === void 0) { presort = false; }\r\n            var size = keys.length;\r\n            var comparator = this._comparator;\r\n            // sort if needed\r\n            if (presort)\r\n                sort(keys, values, 0, size - 1, comparator);\r\n            if (this._root === null) { // empty tree\r\n                this._root = loadRecursive(keys, values, 0, size);\r\n                this._size = size;\r\n            }\r\n            else { // that re-builds the whole tree from two in-order traversals\r\n                var mergedList = mergeLists(this.toList(), createList(keys, values), comparator);\r\n                size = this._size + size;\r\n                this._root = sortedListToBST({ head: mergedList }, 0, size);\r\n            }\r\n            return this;\r\n        };\r\n        Tree.prototype.isEmpty = function () { return this._root === null; };\r\n        Object.defineProperty(Tree.prototype, \"size\", {\r\n            get: function () { return this._size; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Tree.prototype, \"root\", {\r\n            get: function () { return this._root; },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Tree.prototype.toString = function (printNode) {\r\n            if (printNode === void 0) { printNode = function (n) { return String(n.key); }; }\r\n            var out = [];\r\n            printRow(this._root, '', true, function (v) { return out.push(v); }, printNode);\r\n            return out.join('');\r\n        };\r\n        Tree.prototype.update = function (key, newKey, newData) {\r\n            var comparator = this._comparator;\r\n            var _a = split(key, this._root, comparator), left = _a.left, right = _a.right;\r\n            if (comparator(key, newKey) < 0) {\r\n                right = insert(newKey, newData, right, comparator);\r\n            }\r\n            else {\r\n                left = insert(newKey, newData, left, comparator);\r\n            }\r\n            this._root = merge(left, right, comparator);\r\n        };\r\n        Tree.prototype.split = function (key) {\r\n            return split(key, this._root, this._comparator);\r\n        };\r\n        Tree.prototype[Symbol.iterator] = function () {\r\n            var current, Q, done;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        current = this._root;\r\n                        Q = [];\r\n                        done = false;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!!done) return [3 /*break*/, 6];\r\n                        if (!(current !== null)) return [3 /*break*/, 2];\r\n                        Q.push(current);\r\n                        current = current.left;\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(Q.length !== 0)) return [3 /*break*/, 4];\r\n                        current = Q.pop();\r\n                        return [4 /*yield*/, current];\r\n                    case 3:\r\n                        _a.sent();\r\n                        current = current.right;\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        done = true;\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 1];\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        };\r\n        return Tree;\r\n    }());\r\n    function loadRecursive(keys, values, start, end) {\r\n        var size = end - start;\r\n        if (size > 0) {\r\n            var middle = start + Math.floor(size / 2);\r\n            var key = keys[middle];\r\n            var data = values[middle];\r\n            var node = new Node(key, data);\r\n            node.left = loadRecursive(keys, values, start, middle);\r\n            node.right = loadRecursive(keys, values, middle + 1, end);\r\n            return node;\r\n        }\r\n        return null;\r\n    }\r\n    function createList(keys, values) {\r\n        var head = new Node(null, null);\r\n        var p = head;\r\n        for (var i = 0; i < keys.length; i++) {\r\n            p = p.next = new Node(keys[i], values[i]);\r\n        }\r\n        p.next = null;\r\n        return head.next;\r\n    }\r\n    function toList(root) {\r\n        var current = root;\r\n        var Q = [];\r\n        var done = false;\r\n        var head = new Node(null, null);\r\n        var p = head;\r\n        while (!done) {\r\n            if (current) {\r\n                Q.push(current);\r\n                current = current.left;\r\n            }\r\n            else {\r\n                if (Q.length > 0) {\r\n                    current = p = p.next = Q.pop();\r\n                    current = current.right;\r\n                }\r\n                else\r\n                    done = true;\r\n            }\r\n        }\r\n        p.next = null; // that'll work even if the tree was empty\r\n        return head.next;\r\n    }\r\n    function sortedListToBST(list, start, end) {\r\n        var size = end - start;\r\n        if (size > 0) {\r\n            var middle = start + Math.floor(size / 2);\r\n            var left = sortedListToBST(list, start, middle);\r\n            var root = list.head;\r\n            root.left = left;\r\n            list.head = list.head.next;\r\n            root.right = sortedListToBST(list, middle + 1, end);\r\n            return root;\r\n        }\r\n        return null;\r\n    }\r\n    function mergeLists(l1, l2, compare) {\r\n        var head = new Node(null, null); // dummy\r\n        var p = head;\r\n        var p1 = l1;\r\n        var p2 = l2;\r\n        while (p1 !== null && p2 !== null) {\r\n            if (compare(p1.key, p2.key) < 0) {\r\n                p.next = p1;\r\n                p1 = p1.next;\r\n            }\r\n            else {\r\n                p.next = p2;\r\n                p2 = p2.next;\r\n            }\r\n            p = p.next;\r\n        }\r\n        if (p1 !== null) {\r\n            p.next = p1;\r\n        }\r\n        else if (p2 !== null) {\r\n            p.next = p2;\r\n        }\r\n        return head.next;\r\n    }\r\n    function sort(keys, values, left, right, compare) {\r\n        if (left >= right)\r\n            return;\r\n        var pivot = keys[(left + right) >> 1];\r\n        var i = left - 1;\r\n        var j = right + 1;\r\n        while (true) {\r\n            do\r\n                i++;\r\n            while (compare(keys[i], pivot) < 0);\r\n            do\r\n                j--;\r\n            while (compare(keys[j], pivot) > 0);\r\n            if (i >= j)\r\n                break;\r\n            var tmp = keys[i];\r\n            keys[i] = keys[j];\r\n            keys[j] = tmp;\r\n            tmp = values[i];\r\n            values[i] = values[j];\r\n            values[j] = tmp;\r\n        }\r\n        sort(keys, values, left, j, compare);\r\n        sort(keys, values, j + 1, right, compare);\r\n    }\n\n    return Tree;\n\n})));\n//# sourceMappingURL=splay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/splaytree@3.1.2/node_modules/splaytree/dist/splay.js\n");

/***/ })

};
;