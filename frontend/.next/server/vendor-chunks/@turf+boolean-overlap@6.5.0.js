"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+boolean-overlap@6.5.0";
exports.ids = ["vendor-chunks/@turf+boolean-overlap@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+boolean-overlap@6.5.0/node_modules/@turf/boolean-overlap/dist/es/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+boolean-overlap@6.5.0/node_modules/@turf/boolean-overlap/dist/es/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ booleanOverlap)\n/* harmony export */ });\n/* harmony import */ var _turf_meta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/meta */ \"(ssr)/./node_modules/.pnpm/@turf+meta@6.5.0/node_modules/@turf/meta/dist/es/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/.pnpm/@turf+invariant@6.5.0/node_modules/@turf/invariant/dist/es/index.js\");\n/* harmony import */ var _turf_line_overlap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/line-overlap */ \"(ssr)/./node_modules/.pnpm/@turf+line-overlap@6.5.0/node_modules/@turf/line-overlap/dist/es/index.js\");\n/* harmony import */ var _turf_line_intersect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turf/line-intersect */ \"(ssr)/./node_modules/.pnpm/@turf+line-intersect@6.5.0/node_modules/@turf/line-intersect/dist/es/index.js\");\n/* harmony import */ var geojson_equality__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! geojson-equality */ \"(ssr)/./node_modules/.pnpm/geojson-equality@0.1.6/node_modules/geojson-equality/index.js\");\n\n\n\n\n\n/**\n * Compares two geometries of the same dimension and returns true if their intersection set results in a geometry\n * different from both but of the same dimension. It applies to Polygon/Polygon, LineString/LineString,\n * Multipoint/Multipoint, MultiLineString/MultiLineString and MultiPolygon/MultiPolygon.\n *\n * In other words, it returns true if the two geometries overlap, provided that neither completely contains the other.\n *\n * @name booleanOverlap\n * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature1 input\n * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature2 input\n * @returns {boolean} true/false\n * @example\n * var poly1 = turf.polygon([[[0,0],[0,5],[5,5],[5,0],[0,0]]]);\n * var poly2 = turf.polygon([[[1,1],[1,6],[6,6],[6,1],[1,1]]]);\n * var poly3 = turf.polygon([[[10,10],[10,15],[15,15],[15,10],[10,10]]]);\n *\n * turf.booleanOverlap(poly1, poly2)\n * //=true\n * turf.booleanOverlap(poly2, poly3)\n * //=false\n */\nfunction booleanOverlap(feature1, feature2) {\n    var geom1 = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getGeom)(feature1);\n    var geom2 = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getGeom)(feature2);\n    var type1 = geom1.type;\n    var type2 = geom2.type;\n    if ((type1 === \"MultiPoint\" && type2 !== \"MultiPoint\") ||\n        ((type1 === \"LineString\" || type1 === \"MultiLineString\") &&\n            type2 !== \"LineString\" &&\n            type2 !== \"MultiLineString\") ||\n        ((type1 === \"Polygon\" || type1 === \"MultiPolygon\") &&\n            type2 !== \"Polygon\" &&\n            type2 !== \"MultiPolygon\")) {\n        throw new Error(\"features must be of the same type\");\n    }\n    if (type1 === \"Point\")\n        throw new Error(\"Point geometry not supported\");\n    // features must be not equal\n    var equality = new geojson_equality__WEBPACK_IMPORTED_MODULE_4__({ precision: 6 });\n    if (equality.compare(feature1, feature2))\n        return false;\n    var overlap = 0;\n    switch (type1) {\n        case \"MultiPoint\":\n            for (var i = 0; i < geom1.coordinates.length; i++) {\n                for (var j = 0; j < geom2.coordinates.length; j++) {\n                    var coord1 = geom1.coordinates[i];\n                    var coord2 = geom2.coordinates[j];\n                    if (coord1[0] === coord2[0] && coord1[1] === coord2[1]) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        case \"LineString\":\n        case \"MultiLineString\":\n            (0,_turf_meta__WEBPACK_IMPORTED_MODULE_0__.segmentEach)(feature1, function (segment1) {\n                (0,_turf_meta__WEBPACK_IMPORTED_MODULE_0__.segmentEach)(feature2, function (segment2) {\n                    if ((0,_turf_line_overlap__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(segment1, segment2).features.length)\n                        overlap++;\n                });\n            });\n            break;\n        case \"Polygon\":\n        case \"MultiPolygon\":\n            (0,_turf_meta__WEBPACK_IMPORTED_MODULE_0__.segmentEach)(feature1, function (segment1) {\n                (0,_turf_meta__WEBPACK_IMPORTED_MODULE_0__.segmentEach)(feature2, function (segment2) {\n                    if ((0,_turf_line_intersect__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(segment1, segment2).features.length)\n                        overlap++;\n                });\n            });\n            break;\n    }\n    return overlap > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHR1cmYrYm9vbGVhbi1vdmVybGFwQDYuNS4wL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLW92ZXJsYXAvZGlzdC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBeUM7QUFDQztBQUNHO0FBQ0k7QUFDRjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtRUFBbUU7QUFDL0UsWUFBWSxtRUFBbUU7QUFDL0UsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZixnQkFBZ0Isd0RBQU87QUFDdkIsZ0JBQWdCLHdEQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkNBQWUsR0FBRyxjQUFjO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFELGdDQUFnQyw4QkFBOEI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFXO0FBQ3ZCLGdCQUFnQix1REFBVztBQUMzQix3QkFBd0IsOERBQVc7QUFDbkM7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQVc7QUFDdkIsZ0JBQWdCLHVEQUFXO0FBQzNCLHdCQUF3QixnRUFBYTtBQUNyQztBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZnZhbHVlLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0dXJmK2Jvb2xlYW4tb3ZlcmxhcEA2LjUuMC9ub2RlX21vZHVsZXMvQHR1cmYvYm9vbGVhbi1vdmVybGFwL2Rpc3QvZXMvaW5kZXguanM/MDhlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZWdtZW50RWFjaCB9IGZyb20gXCJAdHVyZi9tZXRhXCI7XG5pbXBvcnQgeyBnZXRHZW9tIH0gZnJvbSBcIkB0dXJmL2ludmFyaWFudFwiO1xuaW1wb3J0IGxpbmVPdmVybGFwIGZyb20gXCJAdHVyZi9saW5lLW92ZXJsYXBcIjtcbmltcG9ydCBsaW5lSW50ZXJzZWN0IGZyb20gXCJAdHVyZi9saW5lLWludGVyc2VjdFwiO1xuaW1wb3J0IEdlb2pzb25FcXVhbGl0eSBmcm9tIFwiZ2VvanNvbi1lcXVhbGl0eVwiO1xuLyoqXG4gKiBDb21wYXJlcyB0d28gZ2VvbWV0cmllcyBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGVpciBpbnRlcnNlY3Rpb24gc2V0IHJlc3VsdHMgaW4gYSBnZW9tZXRyeVxuICogZGlmZmVyZW50IGZyb20gYm90aCBidXQgb2YgdGhlIHNhbWUgZGltZW5zaW9uLiBJdCBhcHBsaWVzIHRvIFBvbHlnb24vUG9seWdvbiwgTGluZVN0cmluZy9MaW5lU3RyaW5nLFxuICogTXVsdGlwb2ludC9NdWx0aXBvaW50LCBNdWx0aUxpbmVTdHJpbmcvTXVsdGlMaW5lU3RyaW5nIGFuZCBNdWx0aVBvbHlnb24vTXVsdGlQb2x5Z29uLlxuICpcbiAqIEluIG90aGVyIHdvcmRzLCBpdCByZXR1cm5zIHRydWUgaWYgdGhlIHR3byBnZW9tZXRyaWVzIG92ZXJsYXAsIHByb3ZpZGVkIHRoYXQgbmVpdGhlciBjb21wbGV0ZWx5IGNvbnRhaW5zIHRoZSBvdGhlci5cbiAqXG4gKiBAbmFtZSBib29sZWFuT3ZlcmxhcFxuICogQHBhcmFtICB7R2VvbWV0cnl8RmVhdHVyZTxMaW5lU3RyaW5nfE11bHRpTGluZVN0cmluZ3xQb2x5Z29ufE11bHRpUG9seWdvbj59IGZlYXR1cmUxIGlucHV0XG4gKiBAcGFyYW0gIHtHZW9tZXRyeXxGZWF0dXJlPExpbmVTdHJpbmd8TXVsdGlMaW5lU3RyaW5nfFBvbHlnb258TXVsdGlQb2x5Z29uPn0gZmVhdHVyZTIgaW5wdXRcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlL2ZhbHNlXG4gKiBAZXhhbXBsZVxuICogdmFyIHBvbHkxID0gdHVyZi5wb2x5Z29uKFtbWzAsMF0sWzAsNV0sWzUsNV0sWzUsMF0sWzAsMF1dXSk7XG4gKiB2YXIgcG9seTIgPSB0dXJmLnBvbHlnb24oW1tbMSwxXSxbMSw2XSxbNiw2XSxbNiwxXSxbMSwxXV1dKTtcbiAqIHZhciBwb2x5MyA9IHR1cmYucG9seWdvbihbW1sxMCwxMF0sWzEwLDE1XSxbMTUsMTVdLFsxNSwxMF0sWzEwLDEwXV1dKTtcbiAqXG4gKiB0dXJmLmJvb2xlYW5PdmVybGFwKHBvbHkxLCBwb2x5MilcbiAqIC8vPXRydWVcbiAqIHR1cmYuYm9vbGVhbk92ZXJsYXAocG9seTIsIHBvbHkzKVxuICogLy89ZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYm9vbGVhbk92ZXJsYXAoZmVhdHVyZTEsIGZlYXR1cmUyKSB7XG4gICAgdmFyIGdlb20xID0gZ2V0R2VvbShmZWF0dXJlMSk7XG4gICAgdmFyIGdlb20yID0gZ2V0R2VvbShmZWF0dXJlMik7XG4gICAgdmFyIHR5cGUxID0gZ2VvbTEudHlwZTtcbiAgICB2YXIgdHlwZTIgPSBnZW9tMi50eXBlO1xuICAgIGlmICgodHlwZTEgPT09IFwiTXVsdGlQb2ludFwiICYmIHR5cGUyICE9PSBcIk11bHRpUG9pbnRcIikgfHxcbiAgICAgICAgKCh0eXBlMSA9PT0gXCJMaW5lU3RyaW5nXCIgfHwgdHlwZTEgPT09IFwiTXVsdGlMaW5lU3RyaW5nXCIpICYmXG4gICAgICAgICAgICB0eXBlMiAhPT0gXCJMaW5lU3RyaW5nXCIgJiZcbiAgICAgICAgICAgIHR5cGUyICE9PSBcIk11bHRpTGluZVN0cmluZ1wiKSB8fFxuICAgICAgICAoKHR5cGUxID09PSBcIlBvbHlnb25cIiB8fCB0eXBlMSA9PT0gXCJNdWx0aVBvbHlnb25cIikgJiZcbiAgICAgICAgICAgIHR5cGUyICE9PSBcIlBvbHlnb25cIiAmJlxuICAgICAgICAgICAgdHlwZTIgIT09IFwiTXVsdGlQb2x5Z29uXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImZlYXR1cmVzIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGUxID09PSBcIlBvaW50XCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvaW50IGdlb21ldHJ5IG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgLy8gZmVhdHVyZXMgbXVzdCBiZSBub3QgZXF1YWxcbiAgICB2YXIgZXF1YWxpdHkgPSBuZXcgR2VvanNvbkVxdWFsaXR5KHsgcHJlY2lzaW9uOiA2IH0pO1xuICAgIGlmIChlcXVhbGl0eS5jb21wYXJlKGZlYXR1cmUxLCBmZWF0dXJlMikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgb3ZlcmxhcCA9IDA7XG4gICAgc3dpdGNoICh0eXBlMSkge1xuICAgICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tMS5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2VvbTIuY29vcmRpbmF0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkMSA9IGdlb20xLmNvb3JkaW5hdGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQyID0gZ2VvbTIuY29vcmRpbmF0ZXNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb29yZDFbMF0gPT09IGNvb3JkMlswXSAmJiBjb29yZDFbMV0gPT09IGNvb3JkMlsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6XG4gICAgICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjpcbiAgICAgICAgICAgIHNlZ21lbnRFYWNoKGZlYXR1cmUxLCBmdW5jdGlvbiAoc2VnbWVudDEpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50RWFjaChmZWF0dXJlMiwgZnVuY3Rpb24gKHNlZ21lbnQyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lT3ZlcmxhcChzZWdtZW50MSwgc2VnbWVudDIpLmZlYXR1cmVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXArKztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJQb2x5Z29uXCI6XG4gICAgICAgIGNhc2UgXCJNdWx0aVBvbHlnb25cIjpcbiAgICAgICAgICAgIHNlZ21lbnRFYWNoKGZlYXR1cmUxLCBmdW5jdGlvbiAoc2VnbWVudDEpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50RWFjaChmZWF0dXJlMiwgZnVuY3Rpb24gKHNlZ21lbnQyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lSW50ZXJzZWN0KHNlZ21lbnQxLCBzZWdtZW50MikuZmVhdHVyZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcCsrO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJsYXAgPiAwO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+boolean-overlap@6.5.0/node_modules/@turf/boolean-overlap/dist/es/index.js\n");

/***/ })

};
;