"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+boolean-crosses@6.5.0";
exports.ids = ["vendor-chunks/@turf+boolean-crosses@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+boolean-crosses@6.5.0/node_modules/@turf/boolean-crosses/dist/es/index.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+boolean-crosses@6.5.0/node_modules/@turf/boolean-crosses/dist/es/index.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _turf_line_intersect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/line-intersect */ \"(ssr)/./node_modules/.pnpm/@turf+line-intersect@6.5.0/node_modules/@turf/line-intersect/dist/es/index.js\");\n/* harmony import */ var _turf_polygon_to_line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/polygon-to-line */ \"(ssr)/./node_modules/.pnpm/@turf+polygon-to-line@6.5.0/node_modules/@turf/polygon-to-line/dist/es/index.js\");\n/* harmony import */ var _turf_boolean_point_in_polygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @turf/boolean-point-in-polygon */ \"(ssr)/./node_modules/.pnpm/@turf+boolean-point-in-polygon@6.5.0/node_modules/@turf/boolean-point-in-polygon/dist/es/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/.pnpm/@turf+invariant@6.5.0/node_modules/@turf/invariant/dist/es/index.js\");\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n\n\n\n\n\n/**\n * Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than\n * the maximum dimension of the two source geometries and the intersection set is interior to\n * both source geometries.\n *\n * Boolean-Crosses returns t (TRUE) for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.\n *\n * @name booleanCrosses\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line1 = turf.lineString([[-2, 2], [4, 2]]);\n * var line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * var cross = turf.booleanCrosses(line1, line2);\n * //=true\n */\nfunction booleanCrosses(feature1, feature2) {\n    var geom1 = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_3__.getGeom)(feature1);\n    var geom2 = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_3__.getGeom)(feature2);\n    var type1 = geom1.type;\n    var type2 = geom2.type;\n    switch (type1) {\n        case \"MultiPoint\":\n            switch (type2) {\n                case \"LineString\":\n                    return doMultiPointAndLineStringCross(geom1, geom2);\n                case \"Polygon\":\n                    return doesMultiPointCrossPoly(geom1, geom2);\n                default:\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n            }\n        case \"LineString\":\n            switch (type2) {\n                case \"MultiPoint\": // An inverse operation\n                    return doMultiPointAndLineStringCross(geom2, geom1);\n                case \"LineString\":\n                    return doLineStringsCross(geom1, geom2);\n                case \"Polygon\":\n                    return doLineStringAndPolygonCross(geom1, geom2);\n                default:\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n            }\n        case \"Polygon\":\n            switch (type2) {\n                case \"MultiPoint\": // An inverse operation\n                    return doesMultiPointCrossPoly(geom2, geom1);\n                case \"LineString\": // An inverse operation\n                    return doLineStringAndPolygonCross(geom2, geom1);\n                default:\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n            }\n        default:\n            throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n    }\n}\nfunction doMultiPointAndLineStringCross(multiPoint, lineString) {\n    var foundIntPoint = false;\n    var foundExtPoint = false;\n    var pointLength = multiPoint.coordinates.length;\n    var i = 0;\n    while (i < pointLength && !foundIntPoint && !foundExtPoint) {\n        for (var i2 = 0; i2 < lineString.coordinates.length - 1; i2++) {\n            var incEndVertices = true;\n            if (i2 === 0 || i2 === lineString.coordinates.length - 2) {\n                incEndVertices = false;\n            }\n            if (isPointOnLineSegment(lineString.coordinates[i2], lineString.coordinates[i2 + 1], multiPoint.coordinates[i], incEndVertices)) {\n                foundIntPoint = true;\n            }\n            else {\n                foundExtPoint = true;\n            }\n        }\n        i++;\n    }\n    return foundIntPoint && foundExtPoint;\n}\nfunction doLineStringsCross(lineString1, lineString2) {\n    var doLinesIntersect = (0,_turf_line_intersect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        for (var i = 0; i < lineString1.coordinates.length - 1; i++) {\n            for (var i2 = 0; i2 < lineString2.coordinates.length - 1; i2++) {\n                var incEndVertices = true;\n                if (i2 === 0 || i2 === lineString2.coordinates.length - 2) {\n                    incEndVertices = false;\n                }\n                if (isPointOnLineSegment(lineString1.coordinates[i], lineString1.coordinates[i + 1], lineString2.coordinates[i2], incEndVertices)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction doLineStringAndPolygonCross(lineString, polygon) {\n    var line = (0,_turf_polygon_to_line__WEBPACK_IMPORTED_MODULE_1__.polygonToLine)(polygon);\n    var doLinesIntersect = (0,_turf_line_intersect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(lineString, line);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction doesMultiPointCrossPoly(multiPoint, polygon) {\n    var foundIntPoint = false;\n    var foundExtPoint = false;\n    var pointLength = multiPoint.coordinates.length;\n    for (var i = 0; i < pointLength && (!foundIntPoint || !foundExtPoint); i++) {\n        if ((0,_turf_boolean_point_in_polygon__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_turf_helpers__WEBPACK_IMPORTED_MODULE_4__.point)(multiPoint.coordinates[i]), polygon)) {\n            foundIntPoint = true;\n        }\n        else {\n            foundExtPoint = true;\n        }\n    }\n    return foundExtPoint && foundIntPoint;\n}\n/**\n * Is a point on a line segment\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {number[]} lineSegmentStart coord pair of start of line\n * @param {number[]} lineSegmentEnd coord pair of end of line\n * @param {number[]} pt coord pair of point to check\n * @param {boolean} incEnd whether the point is allowed to fall on the line ends\n * @returns {boolean} true/false\n */\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt, incEnd) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (incEnd) {\n        if (Math.abs(dxl) >= Math.abs(dyl)) {\n            return dxl > 0\n                ? lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0]\n                : lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n        return dyl > 0\n            ? lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1]\n            : lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n    else {\n        if (Math.abs(dxl) >= Math.abs(dyl)) {\n            return dxl > 0\n                ? lineSegmentStart[0] < pt[0] && pt[0] < lineSegmentEnd[0]\n                : lineSegmentEnd[0] < pt[0] && pt[0] < lineSegmentStart[0];\n        }\n        return dyl > 0\n            ? lineSegmentStart[1] < pt[1] && pt[1] < lineSegmentEnd[1]\n            : lineSegmentEnd[1] < pt[1] && pt[1] < lineSegmentStart[1];\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (booleanCrosses);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+boolean-crosses@6.5.0/node_modules/@turf/boolean-crosses/dist/es/index.js\n");

/***/ })

};
;