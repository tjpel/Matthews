"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf+tin@6.5.0";
exports.ids = ["vendor-chunks/@turf+tin@6.5.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@turf+tin@6.5.0/node_modules/@turf/tin/dist/es/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/@turf+tin@6.5.0/node_modules/@turf/tin/dist/es/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ tin)\n/* harmony export */ });\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/.pnpm/@turf+helpers@6.5.0/node_modules/@turf/helpers/dist/es/index.js\");\n// http://en.wikipedia.org/wiki/Delaunay_triangulation\n// https://github.com/ironwallaby/delaunay\n\n/**\n * Takes a set of {@link Point|points} and creates a\n * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * If an optional z-value property is provided then it is added as properties called `a`, `b`,\n * and `c` representing its value at each of the points that represent the corners of the\n * triangle.\n *\n * @name tin\n * @param {FeatureCollection<Point>} points input points\n * @param {String} [z] name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @returns {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z');\n *\n * //addToMap\n * var addToMap = [tin, points]\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   properties.fill = '#' + properties.a + properties.b + properties.c;\n * }\n */\nfunction tin(points, z) {\n    // break down points\n    var isPointZ = false;\n    return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.featureCollection)(triangulate(points.features.map(function (p) {\n        var point = {\n            x: p.geometry.coordinates[0],\n            y: p.geometry.coordinates[1],\n        };\n        if (z) {\n            point.z = p.properties[z];\n        }\n        else if (p.geometry.coordinates.length === 3) {\n            isPointZ = true;\n            point.z = p.geometry.coordinates[2];\n        }\n        return point;\n    })).map(function (triangle) {\n        var a = [triangle.a.x, triangle.a.y];\n        var b = [triangle.b.x, triangle.b.y];\n        var c = [triangle.c.x, triangle.c.y];\n        var properties = {};\n        // Add z coordinates to triangle points if user passed\n        // them in that way otherwise add it as a property.\n        if (isPointZ) {\n            a.push(triangle.a.z);\n            b.push(triangle.b.z);\n            c.push(triangle.c.z);\n        }\n        else {\n            properties = {\n                a: triangle.a.z,\n                b: triangle.b.z,\n                c: triangle.c.z,\n            };\n        }\n        return (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.polygon)([[a, b, c, a]], properties);\n    }));\n}\nvar Triangle = /** @class */ (function () {\n    function Triangle(a, b, c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        var A = b.x - a.x;\n        var B = b.y - a.y;\n        var C = c.x - a.x;\n        var D = c.y - a.y;\n        var E = A * (a.x + b.x) + B * (a.y + b.y);\n        var F = C * (a.x + c.x) + D * (a.y + c.y);\n        var G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n        var dx;\n        var dy;\n        // If the points of the triangle are collinear, then just find the\n        // extremes and use the midpoint as the center of the circumcircle.\n        this.x = (D * E - B * F) / G;\n        this.y = (A * F - C * E) / G;\n        dx = this.x - a.x;\n        dy = this.y - a.y;\n        this.r = dx * dx + dy * dy;\n    }\n    return Triangle;\n}());\nfunction byX(a, b) {\n    return b.x - a.x;\n}\nfunction dedup(edges) {\n    var j = edges.length;\n    var a;\n    var b;\n    var i;\n    var m;\n    var n;\n    outer: while (j) {\n        b = edges[--j];\n        a = edges[--j];\n        i = j;\n        while (i) {\n            n = edges[--i];\n            m = edges[--i];\n            if ((a === m && b === n) || (a === n && b === m)) {\n                edges.splice(j, 2);\n                edges.splice(i, 2);\n                j -= 2;\n                continue outer;\n            }\n        }\n    }\n}\nfunction triangulate(vertices) {\n    // Bail if there aren't enough vertices to form any triangles.\n    if (vertices.length < 3) {\n        return [];\n    }\n    // Ensure the vertex array is in order of descending X coordinate\n    // (which is needed to ensure a subquadratic runtime), and then find\n    // the bounding box around the points.\n    vertices.sort(byX);\n    var i = vertices.length - 1;\n    var xmin = vertices[i].x;\n    var xmax = vertices[0].x;\n    var ymin = vertices[i].y;\n    var ymax = ymin;\n    var epsilon = 1e-12;\n    var a;\n    var b;\n    var c;\n    var A;\n    var B;\n    var G;\n    while (i--) {\n        if (vertices[i].y < ymin) {\n            ymin = vertices[i].y;\n        }\n        if (vertices[i].y > ymax) {\n            ymax = vertices[i].y;\n        }\n    }\n    // Find a supertriangle, which is a triangle that surrounds all the\n    // vertices. This is used like something of a sentinel value to remove\n    // cases in the main algorithm, and is removed before we return any\n    // results.\n    // Once found, put it in the \"open\" list. (The \"open\" list is for\n    // triangles who may still need to be considered; the \"closed\" list is\n    // for triangles which do not.)\n    var dx = xmax - xmin;\n    var dy = ymax - ymin;\n    var dmax = dx > dy ? dx : dy;\n    var xmid = (xmax + xmin) * 0.5;\n    var ymid = (ymax + ymin) * 0.5;\n    var open = [\n        new Triangle({\n            __sentinel: true,\n            x: xmid - 20 * dmax,\n            y: ymid - dmax,\n        }, {\n            __sentinel: true,\n            x: xmid,\n            y: ymid + 20 * dmax,\n        }, {\n            __sentinel: true,\n            x: xmid + 20 * dmax,\n            y: ymid - dmax,\n        }),\n    ];\n    var closed = [];\n    var edges = [];\n    var j;\n    // Incrementally add each vertex to the mesh.\n    i = vertices.length;\n    while (i--) {\n        // For each open triangle, check to see if the current point is\n        // inside it's circumcircle. If it is, remove the triangle and add\n        // it's edges to an edge list.\n        edges.length = 0;\n        j = open.length;\n        while (j--) {\n            // If this point is to the right of this triangle's circumcircle,\n            // then this triangle should never get checked again. Remove it\n            // from the open list, add it to the closed list, and skip.\n            dx = vertices[i].x - open[j].x;\n            if (dx > 0 && dx * dx > open[j].r) {\n                closed.push(open[j]);\n                open.splice(j, 1);\n                continue;\n            }\n            // If not, skip this triangle.\n            dy = vertices[i].y - open[j].y;\n            if (dx * dx + dy * dy > open[j].r) {\n                continue;\n            }\n            // Remove the triangle and add it's edges to the edge list.\n            edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n            open.splice(j, 1);\n        }\n        // Remove any doubled edges.\n        dedup(edges);\n        // Add a new triangle for each edge.\n        j = edges.length;\n        while (j) {\n            b = edges[--j];\n            a = edges[--j];\n            c = vertices[i];\n            // Avoid adding colinear triangles (which have error-prone\n            // circumcircles)\n            A = b.x - a.x;\n            B = b.y - a.y;\n            G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n            if (Math.abs(G) > epsilon) {\n                open.push(new Triangle(a, b, c));\n            }\n        }\n    }\n    // Copy any remaining open triangles to the closed list, and then\n    // remove any triangles that share a vertex with the supertriangle.\n    Array.prototype.push.apply(closed, open);\n    i = closed.length;\n    while (i--) {\n        if (closed[i].a.__sentinel ||\n            closed[i].b.__sentinel ||\n            closed[i].c.__sentinel) {\n            closed.splice(i, 1);\n        }\n    }\n    return closed;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@turf+tin@6.5.0/node_modules/@turf/tin/dist/es/index.js\n");

/***/ })

};
;